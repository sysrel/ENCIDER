KLEE: output directory is "/home/tuba/Documents/tools/klee-3.8/temp/klee-out-36"
KLEE: Using STP solver backend
KLEE: WARNING: undefined reference to function: __kmalloc
KLEE: WARNING: undefined reference to function: _dev_info
KLEE: WARNING: undefined reference to function: kfree
KLEE: WARNING: undefined reference to function: refcount_inc
KLEE: WARNING: undefined reference to function: usb_control_msg
KLEE: WARNING: undefined reference to function: usb_deregister
KLEE: WARNING: undefined reference to function: usb_get_dev
KLEE: WARNING: undefined reference to function: usb_put_dev
KLEE: WARNING: undefined reference to function: usb_register_driver
KLEE: WARNING: undefined reference to function: usbtv_audio_free
KLEE: WARNING: undefined reference to function: usbtv_audio_init
KLEE: WARNING: undefined reference to function: usbtv_video_free
KLEE: WARNING: undefined reference to function: usbtv_video_init
KLEE: WARNING: undefined reference to function: v4l2_device_put
arg 0 type %struct.usb_interface*
allocation size: 824
binding arg 0 of type %struct.usb_interface* to address 41802672
arg 1 type %struct.usb_device_id*
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_device_id* %id, %struct.usb_device_id** %id.addr, align 8
 address: 41809680
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41809680
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %dev1 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.device* %dev1, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %num_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %1, i32 0, i32 2
 initial base: 41802672
geptr offset: 16
geptr base: 41802688
geptr final base: 41802688
main thread es->rtid=-1
Number of states=1
memory operation
  %2 = load i32, i32* %num_altsetting, align 4  %2 = load i32, i32* %num_altsetting, align 4
Framework dts:
data type=struct.usb_interface num inst=1
data type=struct.usbtv num inst=1
data type=struct.usb_device_id num inst=1
data type=struct usb_host_endpoint num inst=1
data type=i8 num inst=10
data type=struct.device num inst=1
data type=struct.usb_device num inst=1
data type=struct.v4l2_device num inst=1
data type=struct.v4l2_ctrl_handler num inst=1
data type=struct.video_device num inst=1
data type=struct.vb2_queue num inst=1
data type=struct.snd_card num inst=1
data type=struct.snd_pcm_substream num inst=1
data type=struct.urb num inst=1
data type=struct.usbtv_buf num inst=1
data type=struct.usb_endpoint_descriptor num inst=1

 address: 41802688
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41802688
default offset for target address 16
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ReadLSB w32 16 arg_0)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=2
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %3 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=2
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=2
Number of states=1
GetElementPtr info:
  %altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %3, i32 0, i32 0
 initial base: 41802672
geptr final base: 41802672
main thread es->rtid=-1
Number of states=1
memory operation
  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8

 address: 41802672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface* (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %arrayidx = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %4, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %bNumEndpoints = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 4
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 4
geptr base: (Add w64 44
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 44
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=1
memory operation
  %5 = load i8, i8* %bNumEndpoints, align 1
 address: (Add w64 44
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 8
bytes for the memop: 1
address for memop (Add w64 44
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446744073668521228
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446744073668521228
               (ReadLSB w64 0 arg_0))
      336)
in bounds? 0
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668521228
                                  (ReadLSB w64 0 arg_0)))
          const_arr1)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668401164
                                  (ReadLSB w64 0 arg_0)))
          const_arr2)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668400732
                                  (ReadLSB w64 0 arg_0)))
          const_arr3)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668400156
                                  (ReadLSB w64 0 arg_0)))
          const_arr4)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668399916
                                  (ReadLSB w64 0 arg_0)))
          const_arr5)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668399868
                                  (ReadLSB w64 0 arg_0)))
          const_arr6)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668398988
                                  (ReadLSB w64 0 arg_0)))
          const_arr7)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668398140
                                  (ReadLSB w64 0 arg_0)))
          const_arr8)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668397916
                                  (ReadLSB w64 0 arg_0)))
          const_arr9)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668383692
                                  (ReadLSB w64 0 arg_0)))
          const_arr10)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668383356
                                  (ReadLSB w64 0 arg_0)))
          const_arr11)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668380284
                                  (ReadLSB w64 0 arg_0)))
          const_arr12)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668379884
                                  (ReadLSB w64 0 arg_0)))
          const_arr13)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668379436
                                  (ReadLSB w64 0 arg_0)))
          const_arr14)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668378540
                                  (ReadLSB w64 0 arg_0)))
          const_arr15)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668378492
                                  (ReadLSB w64 0 arg_0)))
          const_arr16)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668378156
                                  (ReadLSB w64 0 arg_0)))
          const_arr17)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668377692
                                  (ReadLSB w64 0 arg_0)))
          const_arr18)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668375148
                                  (ReadLSB w64 0 arg_0)))
          const_arr19)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668374812
                                  (ReadLSB w64 0 arg_0)))
          const_arr20)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668374316
                                  (ReadLSB w64 0 arg_0)))
          const_arr21)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668374268
                                  (ReadLSB w64 0 arg_0)))
          const_arr22)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668373404
                                  (ReadLSB w64 0 arg_0)))
          const_arr23)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668373356
                                  (ReadLSB w64 0 arg_0)))
          const_arr24)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668372396
                                  (ReadLSB w64 0 arg_0)))
          const_arr25)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668371932
                                  (ReadLSB w64 0 arg_0)))
          const_arr26)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668371100
                                  (ReadLSB w64 0 arg_0)))
          const_arr27)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073668371052
                                  (ReadLSB w64 0 arg_0)))
          const_arr28)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667990652
                                  (ReadLSB w64 0 arg_0)))
          const_arr29)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667988204
                                  (ReadLSB w64 0 arg_0)))
          const_arr30)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667987916
                                  (ReadLSB w64 0 arg_0)))
          const_arr31)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667965468
                                  (ReadLSB w64 0 arg_0)))
          const_arr32)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667965068
                                  (ReadLSB w64 0 arg_0)))
          const_arr33)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667964572
                                  (ReadLSB w64 0 arg_0)))
          const_arr34)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667963628
                                  (ReadLSB w64 0 arg_0)))
          const_arr35)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667962380
                                  (ReadLSB w64 0 arg_0)))
          const_arr36)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667961932
                                  (ReadLSB w64 0 arg_0)))
          const_arr37)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667960940
                                  (ReadLSB w64 0 arg_0)))
          const_arr38)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667960556
                                  (ReadLSB w64 0 arg_0)))
          const_arr39)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667960124
                                  (ReadLSB w64 0 arg_0)))
          const_arr40)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667782108
                                  (ReadLSB w64 0 arg_0)))
          const_arr41)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667781644
                                  (ReadLSB w64 0 arg_0)))
          const_arr42)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667780156
                                  (ReadLSB w64 0 arg_0)))
          const_arr43)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667778332
                                  (ReadLSB w64 0 arg_0)))
          const_arr44)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667778044
                                  (ReadLSB w64 0 arg_0)))
          const_arr45)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667777692
                                  (ReadLSB w64 0 arg_0)))
          const_arr46)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667776396
                                  (ReadLSB w64 0 arg_0)))
          const_arr47)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667775884
                                  (ReadLSB w64 0 arg_0)))
          const_arr48)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667775276
                                  (ReadLSB w64 0 arg_0)))
          const_arr49)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667774540
                                  (ReadLSB w64 0 arg_0)))
          const_arr50)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667773980
                                  (ReadLSB w64 0 arg_0)))
          const_arr51)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667773420
                                  (ReadLSB w64 0 arg_0)))
          const_arr52)
 load result: (Read w8 (Extract w32 KLEE: ERROR: (location information missing) memory error: out of bound pointer
KLEE: NOTE: now ignoring this error at this location
0 (Add w64 18446744073667772860
                                  (ReadLSB w64 0 arg_0)))
          const_arr53)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667772300
                                  (ReadLSB w64 0 arg_0)))
          const_arr54)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667771740
                                  (ReadLSB w64 0 arg_0)))
          const_arr55)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667771084
                                  (ReadLSB w64 0 arg_0)))
          const_arr56)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667770524
                                  (ReadLSB w64 0 arg_0)))
          const_arr57)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667748988
                                  (ReadLSB w64 0 arg_0)))
          arg_0)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667742700
                                  (ReadLSB w64 0 arg_0)))
          const_arr58)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667741980
                                  (ReadLSB w64 0 arg_0)))
          const_arr59)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667741948
                                  (ReadLSB w64 0 arg_0)))
          const_arr60)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667741516
                                  (ReadLSB w64 0 arg_0)))
          const_arr61)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667740684
                                  (ReadLSB w64 0 arg_0)))
          const_arr62)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667740124
                                  (ReadLSB w64 0 arg_0)))
          const_arr63)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667739740
                                  (ReadLSB w64 0 arg_0)))
          const_arr64)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073667739308
                                  (ReadLSB w64 0 arg_0)))
          const_arr65)
 load result: (Read w8 (Extract w32 0 (Add w64 18446604037105181484
                                  (ReadLSB w64 0 arg_0)))
          const_arr66)
 load result: (Read w8 (Extract w32 0 (Add w64 18446604037105179948
                                  (ReadLSB w64 0 arg_0)))
          const_arr67)
 load result: (Read w8 (Extract w32 0 (Add w64 18446604037105177388
                                  (ReadLSB w64 0 arg_0)))
          const_arr68)
 load result: (Read w8 (Extract w32 0 (Add w64 18446604037060307212
                                  (ReadLSB w64 0 arg_0)))
          const_arr69)
 load result: (Read w8 (Extract w32 0 (Add w64 18446604037060307196
                                  (ReadLSB w64 0 arg_0)))
          const_arr70)
 load result: (Read w8 (Extract w32 0 (Add w64 18446604037060307180
                                  (ReadLSB w64 0 arg_0)))
          const_arr71)
 load result: (Read w8 (Extract w32 0 (Add w64 18446604037060307164
                                  (ReadLSB w64 0 arg_0)))
          const_arr72)
Info: 
	address: (Add w64 44
          (ReadLSB w64 0 arg_0))
	example: 44
	range: [0, 18446744073709551615]
	next: object at 41030432 of size 336
		MO0[336] allocated at usbtv_probe():  %retval = alloca i32, align 4

main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
Number of states=71
main thread es->rtid=-1
Number of states=71
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=69
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Number of states=65
main thread es->rtid=-1
Number of states=65
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
Number of states=60
main thread es->rtid=-1
Number of states=60
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=59
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
Number of states=56
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
Number of states=55
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=55
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=55
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
Number of states=51
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=50
Number of states=49
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=47
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
Number of states=46
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
Number of states=44
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=40
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=40
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
Number of states=39
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
Number of states=38
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=38
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
Number of states=36
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
Number of states=35
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=35
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
Number of states=34
Number of states=33
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
Number of states=32
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
Number of states=31
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=31
Number of states=30
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=30
Number of states=29
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=29
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
 initial base: 41802672
geptr final base: 41802672
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=30
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=29
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=28
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=28
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=28
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
Number of states=27
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=27
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=27
Number of states=26
Number of states=25
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=25
Number of states=24
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
Number of states=23
main thread es->rtid=-1
Number of states=23
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=23
Number of states=22
main thread es->rtid=-1
Number of states=22
Number of states=21
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=21
Number of states=20
Number of states=19
Number of states=18
Number of states=17
Number of states=16
main thread es->rtid=-1
Number of states=16
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

 address: 41802672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface* (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=16
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=16
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=16
Number of states=15
Number of states=14
Number of states=13
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
Number of states=13
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=13
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=14
Number of states=13
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=13
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=13
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
Number of states=13
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=13
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=14
main thread es->rtid=-1
Number of states=14
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=14
Number of states=13
Number of states=12
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=12
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
 initial base: 41802672
geptr final base: 41802672
main thread es->rtid=-1
Number of states=12
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=12
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=12
Number of states=11
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=11
Number of states=10
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

 address: 41802672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface* (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=10
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=10
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=10
Number of states=9
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=9
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=9
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=9
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
 initial base: 41802672
geptr final base: 41802672
main thread es->rtid=-1
Number of states=9
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=9
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8KLEE: ERROR: (location information missing) memory error: out of bound pointer
KLEE: NOTE: now ignoring this error at this location

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446744073667749008
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446744073667749008
               (ReadLSB w64 0 arg_0))
      817)
in bounds? 0
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
Info: 
	address: (Add w64 64
          (ReadLSB w64 0 arg_0))
	example: 41803504
	range: [41803489, 41803515]
	next: object at 41808960 of size 4
		MO65[4] allocated at usbtv_probe():  %retval = alloca i32, align 4
	prev: object at 41802672 of size 824
		MO64[824] allocated at usbtv_probe():  %retval = alloca i32, align 4

main thread es->rtid=-1
Number of states=9
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=9
memory operation
  store i32 -19, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=9
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 41812352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=9
main thread es->rtid=-1
Number of states=9
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=9
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446604037105177408
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446604037105177408
               (ReadLSB w64 0 arg_0))
      761)
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=9
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=9
Number of states=8
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=8
Number of states=7
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
 initial base: 41802672
geptr final base: 41802672
main thread es->rtid=-1
Number of states=7
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

 address: 41802672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface* (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=7
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

 address: 41802672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface* (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=7
Alloc'ing...
main thread es->rtid=-1
Number of states=7
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=7
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=7
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=7
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 41812352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=7
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=7
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=7
Number of states=6
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42388080
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42388080
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=6
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446604037105179968
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446604037105179968
               (ReadLSB w64 0 arg_0))
      1529)
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42388080
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42388080
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1
 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668521188
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668521188
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      335)
in bounds? 0
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668521188
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr1)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668401124
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr2)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400692
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr3)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400116
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr4)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399876
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr5)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399828
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr6)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398948
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr7)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398100
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr8)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668397876
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr9)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383652
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr10)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383316
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr11)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668380244
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr12)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379844
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr13)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379396
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr14)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378500
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr15)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378452
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr16)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378116
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr17)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668377652
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr18)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668375108
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr19)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374772
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr20)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374276
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr21)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374228
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr22)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373364
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr23)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373316
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr24)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668372356
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr25)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371892
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr26)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371060
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr27)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371012
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr28)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667990612
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr29)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667988164
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr30)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667987876
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr31)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965428
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr32)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965028
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr33)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667964532
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr34)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667963588
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr35)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667962340
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr36)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667961892
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr37)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960900
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr38)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960516
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr39)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960084
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr40)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667782068
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr41)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667781604
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr42)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667780116
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr43)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778292
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr44)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778004
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr45)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667777652
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr46)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667776356
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr47)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775844
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr48)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775236
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr49)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667774500
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr50)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773940
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr51)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773380
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr52)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772820
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr53)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772260
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr54)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771700
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr55)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771044
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr56)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667770484
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr57)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667748948
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) arg_0)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667742660
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr58)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741940
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr59)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741908
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr60)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741476
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr61)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740644
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr62)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740084
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr63)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739700
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr64)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739268
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) U0:[7=N2:(Read w8 (Add w32 7 N1)
                                                                                                                                    arg_0),
                                                                                                                      6=N3:(Read w8 (Add w32 6 N1)
                                                                                                                                    arg_0),
                                                                                                                      5=N4:(Read w8 (Add w32 5 N1)
                                                                                                                                    arg_0),
                                                                                                                      4=N5:(Read w8 (Add w32 4 N1)
                                                                                                                                    arg_0),
                                                                                                                      3=N6:(Read w8 (Add w32 3 N1)
                                                                                                                                    arg_0),
                                                                                                                      2=N7:(Read w8 (Add w32 2 N1)
                                                                                                                                    arg_0),
                                                                                                                      1=N8:(Read w8 (Add w32 1 N1)
                                                                                                                                    arg_0),
                                                                                                                      0=N9:(Read w8 N1 arg_0)] @ const_arr65)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667163540
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) U0:[7=N2:(Read w8 (Add w32 7 N1)
                                                                                                                                    arg_0),
                                                                                                                      6=N3:(Read w8 (Add w32 6 N1)
                                                                                                                                    arg_0),
                                                                                                                      5=N4:(Read w8 (Add w32 5 N1)
                                                                                                                                    arg_0),
                                                                                                                      4=N5:(Read w8 (Add w32 4 N1)
                                                                                                                                    arg_0),
                                                                                                                      3=N6:(Read w8 (Add w32 3 N1)
                                                                                                                  KLEE: ERROR: (location information missing) memory error: out of bound pointer
KLEE: NOTE: now ignoring this error at this location
                  arg_0),
                                                                                                                      2=N7:(Read w8 (Add w32 2 N1)
                                                                                                                                    arg_0),
                                                                                                                      1=N8:(Read w8 (Add w32 1 N1)
                                                                                                                                    arg_0),
                                                                                                                      0=N9:(Read w8 N1 arg_0)] @ const_arr73)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105181444
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr66)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105179908
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr67)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105177348
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr68)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307172
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr69)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307156
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr70)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307140
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr71)
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307124
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr72)
Info: 
	address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
	example: 4
	range: [0, 18446744073709551615]
	next: object at 41030432 of size 336
		MO0[336] allocated at usbtv_probe():  %retval = alloca i32, align 4

main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446604037105181504
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446604037105181504
               (ReadLSB w64 0 arg_0))
      1529)
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 41812352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=79
main thread es->rtid=-1
Number of states=79
Number of states=78
main thread es->rtid=-1
Number of states=78
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  %40 = load i32, i32* %retval
 address: 41808960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41808960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
Alloc'ing...
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668521188
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr1))
          2047)
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42133696
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42133696
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42133696
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42133696
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 41812352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                         (ReadLSB w64 0 arg_0))) const_arr66)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                                  (ReadLSB w64 0 arg_0))) const_arr66))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                                  (ReadLSB w64 0 arg_0))) const_arr66))
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
main thread es->rtid=-1
Number of states=78
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1
 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                                  (ReadLSB w64 0 arg_0))) const_arr66))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
Info: 
	address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105181504
                                                  (ReadLSB w64 0 arg_0))) const_arr66))
	example: 42949672973
	range: [42949672973, 42949672973]
	next: object at 41030432 of size 336
		MO0[336] allocated at usbtv_probe():  %retval = alloca i32, align 4

Number of states=77
main thread es->rtid=-1
Number of states=77
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=77
main thread es->rtid=-1
Number of states=77
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
Alloc'ing...
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 41802592
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41802592
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
Alloc'ing...
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
Alloc'ing...
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46671760
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46671760
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 41802592
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802592
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                         (ReadLSB w64 0 arg_0))) const_arr68)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                                  (ReadLSB w64 0 arg_0))) const_arr68))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                                  (ReadLSB w64 0 arg_0))) const_arr68))
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46671760
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46671760
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
Alloc'ing...
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45200704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45200704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45200704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45200704
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400692
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr3))
          2047)
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=76
main thread es->rtid=-1
Number of states=76
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1
 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                                  (ReadLSB w64 0 arg_0))) const_arr68))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
Info: 
	address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105177408
                                                  (ReadLSB w64 0 arg_0))) const_arr68))
	example: 13836395081822951436
	range: [4, 15566929644501915660]
	next: object at 140036604370176 of size 1536
		MO43[1536] (no allocation info)
	prev: object at 41812352 of size 8
		MO72[8] allocated at usbtv_probe():  %ep = alloca %struct.usb_host_endpoint*, align 8

Number of states=75
main thread es->rtid=-1
Number of states=75
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668521188
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668521188
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      335)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668521188
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr1)
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42961136
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42961136
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                         (ReadLSB w64 0 arg_0))) const_arr67)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                                  (ReadLSB w64 0 arg_0))) const_arr67))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                                  (ReadLSB w64 0 arg_0))) const_arr67))
main thread es->rtid=-1
Number of states=75
main thread es->rtid=-1
Number of states=75
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1
 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                                  (ReadLSB w64 0 arg_0))) const_arr67))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
Info: 
	address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446604037105179968
                                                  (ReadLSB w64 0 arg_0))) const_arr67))
	example: 42949672973
	range: [42949672973, 42949672973]
	next: object at 41030432 of size 336
		MO0[336] allocated at usbtv_probe():  %retval = alloca i32, align 4

Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42961136
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42961136
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668521188
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr1))
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668401124
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr2))
          2047)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
Alloc'ing...
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
Alloc'ing...
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399876
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr5))
          2047)
main thread es->rtid=-1
Number of states=74
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48376672
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48376672
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48376672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48376672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %mul, i32* %size, align 4KLEE: WARNING ONCE: Alignment of memory from call "malloc" is not modelled. Using alignment of 8.

 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49113776
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668401124
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668401124
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      18)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668401124
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr2)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49113776
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49113776
geptr final base: 49113776
main thread es->rtid=-1
Number of states=74
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49113776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49113776
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47459984
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47459984
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
Alloc'ing...
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399828
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr6))
          2047)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47459984
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47459984
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668401124
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr2))
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
Alloc'ing...
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
Alloc'ing...
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45664352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45664352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45664352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45664352
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 41903504
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41903504
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 41903504
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41903504
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 44050880
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44050880
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374276
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr21))
          2047)
main thread es->rtid=-1
Number of states=74
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 44050880
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44050880
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
Alloc'ing...
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8
KLEE: ERROR: (location information missing) external call with symbolic argument: usb_get_dev
KLEE: NOTE: now ignoring this error at this location

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
main thread es->rtid=-1
Number of states=74
No info
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
Alloc'ing...
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400116
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr4))
          2047)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=73
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49113776
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965428
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr32))
          2047)
main thread es->rtid=-1
Number of states=73
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 44422816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44422816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
Alloc'ing...
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 44422816
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44422816
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49113776
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668400692
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668400692
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      15)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400692
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr3)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49113776
geptr final base: 49113776
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48298160
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48298160
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49113776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49113776
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48298160
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48298160
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400692
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr3))
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
Alloc'ing...
main thread es->rtid=-1
Number of states=73
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378452
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr16))
          2047)
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
Alloc'ing...
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
Alloc'ing...
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
Alloc'ing...
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48506624
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48506624
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668375108
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr19))
          2047)
main thread es->rtid=-1
Number of states=73
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48506624
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48506624
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=73
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46286832
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46286832
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
Alloc'ing...
main thread es->rtid=-1
Number of states=73
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378500
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr15))
          2047)
main thread es->rtid=-1
Number of states=73
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46286832
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46286832
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=73
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667962340
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr36))
          2047)
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48056496
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48056496
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48056496
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48056496
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
No info
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48631888
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48631888
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
Alloc'ing...
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46486304
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46486304
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741940
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr59))
          2047)
main thread es->rtid=-1
Number of states=72
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46486304
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46486304
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668400116
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668400116
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      19)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400116
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr4)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 41839904
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41839904
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 41839904
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41839904
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668400116
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr4))
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49174384
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398948
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr7))
          2047)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48631888
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48631888
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49174384
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49174384
geptr final base: 49174384
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668399876
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668399876
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      34)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399876
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr5)
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49174384
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49174384
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48634848
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48634848
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48634848
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48634848
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399876
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr5))
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
Alloc'ing...
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
Alloc'ing...
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740084
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr63))
          2047)
main thread es->rtid=-1
Number of states=72
Alloc'ing...
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739700
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr64))
          2047)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42649024
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42649024
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773380
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr52))
          2047)
main thread es->rtid=-1
Number of states=72
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42649024
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42649024
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 43538080
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43538080
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 43538080
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43538080
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
Alloc'ing...
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773940
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr51))
          2047)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371060
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr27))
          2047)
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48667856
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48667856
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48667856
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48667856
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=72
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307124
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr72))
          2047)
main thread es->rtid=-1
Number of states=72
No info
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778292
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr44))
          2047)
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740644
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr62))
          2047)
main thread es->rtid=-1
Number of states=71
Alloc'ing...
main thread es->rtid=-1
Number of states=71
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
Alloc'ing...
main thread es->rtid=-1
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741908
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr60))
          2047)
main thread es->rtid=-1
Number of states=71
Alloc'ing...
main thread es->rtid=-1
Number of states=71
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=71
Alloc'ing...
main thread es->rtid=-1
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373316
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr24))
          2047)
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667748948
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) arg_0))
          2047)
main thread es->rtid=-1
Number of states=71
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45708784
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45708784
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45708784
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45708784
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105181444
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr66))
          2047)
main thread es->rtid=-1
Number of states=71
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775844
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr48))
          2047)
main thread es->rtid=-1
Number of states=71
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=71
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=71
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 42037344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42037344
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 42037344
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42037344
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46388144
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46388144
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=71
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=71
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46388144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46388144
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=71
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667776356
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr47))
          2047)
main thread es->rtid=-1
Number of states=71
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46894992
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46894992
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=71
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46894992
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46894992
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=71
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668399828
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668399828
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      79)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399828
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr6)
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
main thread es->rtid=-1
Number of states=71
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=71
No info
Number of states=70
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46117664
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46117664
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667742660
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr58))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46117664
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46117664
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965028
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr33))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383316
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr11))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48466576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48466576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398100
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr8))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771044
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr56))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48466576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48466576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668399828
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr6))
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668380244
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr12))
          2047)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739268
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) U0:[7=N2:(Read w8 (Add w32 7 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         6=N3:(Read w8 (Add w32 6 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         5=N4:(Read w8 (Add w32 5 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         4=N5:(Read w8 (Add w32 4 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         3=N6:(Read w8 (Add w32 3 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         2=N7:(Read w8 (Add w32 2 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         1=N8:(Read w8 (Add w32 1 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         0=N9:(Read w8 N1 arg_0)] @ const_arr65))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668398948
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668398948
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      38)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398948
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr7)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667782068
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr41))
          2047)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105179908
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr67))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775236
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr49))
          2047)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379844
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr13))
          2047)
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47218640
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47218640
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47218640
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47218640
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398948
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr7))
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46065680
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46065680
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46065680
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46065680
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374228
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr22))
          2047)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667781604
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr42))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46171168
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46171168
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105177348
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr68))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49183712
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 41919536
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41919536
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307156
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr70))
          2047)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667780116
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr43))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49183712
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49183712
geptr final base: 49183712
main thread es->rtid=-1
Number of states=70
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46171168
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46171168
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383652
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr10))
          2047)
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46441376
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46441376
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49183712
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49183712
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
Alloc'ing...
main thread es->rtid=-1
Number of states=70
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46441376
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46441376
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=70
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667963588
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr35))
          2047)
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 41866224
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41866224
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
No info
Number of states=69
Alloc'ing...
main thread es->rtid=-1
Number of states=69
Alloc'ing...
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
Alloc'ing...
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
Alloc'ing...
main thread es->rtid=-1
Number of states=69
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 49005968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49005968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 49005968
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49005968
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=69
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307172
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr69))
          2047)
main thread es->rtid=-1
Number of states=69
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374772
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr20))
          2047)
main thread es->rtid=-1
Number of states=69
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 42947680
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42947680
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 42947680
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42947680
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=69
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667163540
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) U0:[7=N2:(Read w8 (Add w32 7 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         6=N3:(Read w8 (Add w32 6 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         5=N4:(Read w8 (Add w32 5 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         4=N5:(Read w8 (Add w32 4 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         3=N6:(Read w8 (Add w32 3 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         2=N7:(Read w8 (Add w32 2 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         1=N8:(Read w8 (Add w32 1 N1)
                                                                                                                                                       arg_0),
                                                                                                                                         0=N9:(Read w8 N1 arg_0)] @ const_arr73))
          2047)
main thread es->rtid=-1
Number of states=69
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=69
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 41866224
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41866224
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667988164
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr30))
          2047)
main thread es->rtid=-1
Number of states=69
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=69
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667770484
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr57))
          2047)
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 41919536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41919536
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48416592
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48416592
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48416592
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48416592
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=69
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667987876
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr31))
          2047)
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=69
No info
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668398100
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668398100
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      14)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398100
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr8)
main thread es->rtid=-1
Number of states=68
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667990612
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr29))
          2047)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=68
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=68
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42022176
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42022176
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42022176
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42022176
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668398100
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr8))
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=68
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668397876
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr9))
          2047)
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379396
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr14))
          2047)
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667961892
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr37))
          2047)
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771700
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr55))
          2047)
main thread es->rtid=-1
Number of states=68
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48157984
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48157984
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48157984
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48157984
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=68
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46464320
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46464320
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46464320
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46464320
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=68
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667964532
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr34))
          2047)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=68
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
Alloc'ing...
main thread es->rtid=-1
Number of states=68
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45778976
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45778976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=68
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45778976
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45778976
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378116
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr17))
          2047)
main thread es->rtid=-1
Number of states=68
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
No info
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45923120
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45923120
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668378500
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668378500
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      28)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378500
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr15)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45808640
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45808640
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45151168
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45151168
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42621744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42621744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45808640
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45808640
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371892
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr26))
          2047)
main thread es->rtid=-1
Number of states=67
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=67
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373364
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr23))
          2047)
main thread es->rtid=-1
Number of states=67
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45151168
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45151168
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668397876
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668397876
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      40)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668397876
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr9)
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=67
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371012
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr28))
          2047)
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46480976
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46480976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46480976
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46480976
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668383316
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668383316
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      1312)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383316
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr11)
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=67
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667777652
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr46))
          2047)
main thread es->rtid=-1
Number of states=67
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46699344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46699344
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46699344
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46699344
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45704912
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45704912
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=67
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48427056
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48427056
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48427056
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48427056
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=67
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668372356
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr25))
          2047)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42389264
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42389264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
Alloc'ing...
main thread es->rtid=-1
Number of states=67
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45923120
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45923120
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42389264
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42389264
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668397876
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr9))
main thread es->rtid=-1
Number of states=67
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960900
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr38))
          2047)
main thread es->rtid=-1
Number of states=67
No info
Number of states=66
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45704912
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45704912
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378500
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr15))
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46087296
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46087296
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46087296
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46087296
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383316
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr11))
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668383652
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668383652
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      9)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383652
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr10)
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42621744
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42621744
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46258336
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46258336
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46258336
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46258336
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668383652
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr10))
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778004
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr45))
          2047)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46163856
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46163856
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=66
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46163856
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46163856
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 44642368
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44642368
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49248032
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667774500
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr50))
          2047)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 41030192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41030192
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49248032
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48668960
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48668960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=66
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48668960
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48668960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49248032
geptr final base: 49248032
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42258256
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42258256
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49248032
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49248032
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46643328
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46643328
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=66
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46643328
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46643328
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42430752
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42430752
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668375108
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668375108
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      12)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668375108
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr19)
main thread es->rtid=-1
Number of states=66
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42430752
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42430752
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=66
Alloc'ing...
main thread es->rtid=-1
Number of states=66
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 49096896
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49096896
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
No info
Number of states=65
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 41030192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41030192
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42258256
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42258256
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45839392
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45839392
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=65
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45839392
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45839392
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46431680
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46431680
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=65
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46431680
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46431680
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=65
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=65
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=65
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960516
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr39))
          2047)
main thread es->rtid=-1
Number of states=65
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 47907264
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47907264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668380244
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668380244
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      42)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668380244
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr12)
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 47907264
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47907264
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=65
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 49096896
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49096896
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48668960
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48668960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=65
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48668960
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48668960
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
Alloc'ing...
main thread es->rtid=-1
Number of states=65
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=65
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=65
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=65
No info
Number of states=64
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45981056
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45981056
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 43060192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43060192
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46350464
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46350464
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45981056
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45981056
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46350464
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46350464
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668380244
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr12))
main thread es->rtid=-1
Number of states=64
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772260
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr54))
          2047)
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 43060192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43060192
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48422704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48422704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48422704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48422704
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 41858192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41858192
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 41858192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41858192
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 41818640
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41818640
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 44642368
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44642368
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 41818640
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41818640
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 43157456
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43157456
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307140
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr71))
          2047)
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=64
Alloc'ing...
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=64
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667741908
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667741908
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741908
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr60)
main thread es->rtid=-1
Number of states=64
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45834848
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45834848
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=64
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45834848
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45834848
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
No info
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668379844
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668379844
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      48)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379844
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr13)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772820
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr53))
          2047)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446604037105179908
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446604037105179908
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      1535)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105179908
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668379396
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668379396
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      266)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379396
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr14)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48799488
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48799488
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48799488
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48799488
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379844
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr13))
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46153728
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46153728
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 49100208
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49100208
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=63
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 43157456
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43157456
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 49100208
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49100208
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46721776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46721776
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 44605984
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44605984
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=63
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667739700
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667739700
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739700
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr64)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48849520
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48849520
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 43968160
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43968160
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48849520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48849520
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46721776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46721776
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 44422816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44422816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46153728
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46153728
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668379396
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr14))
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47080272
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47080272
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 44422816
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44422816
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47892752
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47892752
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 44015440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44015440
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42575952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42575952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 44015440
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44015440
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=63
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 41440176
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41440176
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 47935456
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47935456
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49233792
main thread es->rtid=-1
Number of states=63
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 44605984
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44605984
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667965428
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667965428
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      44)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965428
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr32)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668378452
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668378452
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      19)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378452
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr16)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 %call, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42403776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42403776
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=63
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42403776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42403776
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=63
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42575952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42575952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
No info
Number of states=62
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49233792
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49233792
geptr final base: 49233792
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47613200
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47613200
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47080272
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47080272
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668375108
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr19))
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 41440176
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41440176
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741908
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr60))
main thread es->rtid=-1
Number of states=62
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47613200
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47613200
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378452
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr16))
main thread es->rtid=-1
Number of states=62
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47892752
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47892752
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105179908
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr67))
main thread es->rtid=-1
Number of states=62
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49233792
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49233792
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667988164
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667988164
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      19)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667988164
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr30)
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=62
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45641792
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45641792
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45641792
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45641792
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 49055264
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 49055264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=62
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 47935456
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47935456
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42664144
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42664144
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 43010768
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43010768
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=62
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=62
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446604037060307172
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446604037060307172
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      3)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307172
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr69)
main thread es->rtid=-1
Number of states=62
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=62
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741476
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr61))
          2047)
main thread es->rtid=-1
Number of states=62
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46784816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46784816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46784816
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46784816
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=62
Alloc'ing...
main thread es->rtid=-1
Number of states=62
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49217968
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 43010768
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43010768
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=62
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960084
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr40))
          2047)
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=62
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 44612992
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44612992
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=62
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 44612992
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44612992
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=62
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 43968160
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43968160
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 49055264
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 49055264
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667988164
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr30))
main thread es->rtid=-1
Number of states=62
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=62
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 41944592
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41944592
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49217968
main thread es->rtid=-1
Number of states=62
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=62
No info
Number of states=61
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49217968
geptr final base: 49217968
main thread es->rtid=-1
Number of states=61
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 41810976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668377652
                                                            (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                                    (ReadLSB w64 0 arg_0))) arg_0))) const_arr18))
          2047)
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49217968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49217968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 43045616
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43045616
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46543936
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46543936
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 41947856
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41947856
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46543936
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46543936
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=61
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667740644
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667740644
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      3)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740644
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) U0:[3=(Extract w8 24 N2:(And w32 (ZExt w32 (ReadLSB w16 N0 const_arr62))
                                                                                                                                                   2047)),
                                                                                                                      2=(Extract w8 16 N2),
                                                                                                                      1=(Extract w8 8 N2),
                                                                                                                      0=(Extract w8 0 N2)] @ const_arr62)
main thread es->rtid=-1
Number of states=61
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 43045616
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43045616
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 41944592
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41944592
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739700
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr64))
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42687008
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42687008
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42687008
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42687008
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=61
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446604037060307124
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446604037060307124
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307124
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr72)
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48336400
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48336400
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48336400
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48336400
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=61
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42427728
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42427728
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667771044
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667771044
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      13)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771044
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr56)
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667960900
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667960900
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      15)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960900
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr38)
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48261360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48261360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
Alloc'ing...
main thread es->rtid=-1
Number of states=61
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48261360
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48261360
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=61
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668378116
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668378116
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      32)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378116
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr17)
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=61
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 47784752
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47784752
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=61
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 47784752
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47784752
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
No info
Number of states=60
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=60
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46200304
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46200304
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
Alloc'ing...
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 47842752
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47842752
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 47842752
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47842752
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
Alloc'ing...
main thread es->rtid=-1
Number of states=60
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46200304
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46200304
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45942256
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45942256
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45942256
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45942256
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=60
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48716000
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48716000
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
Alloc'ing...
main thread es->rtid=-1
Number of states=60
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42744896
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42744896
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=60
No info
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42744896
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42744896
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668378116
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr17))
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48267488
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48267488
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 41947856
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41947856
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48668960
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48668960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 47605712
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47605712
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 43408704
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 43408704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667739268
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667739268
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739268
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) U0:[7=N2:(Read w8 (Add w32 7 N1)
                                                                                                                                    arg_0),
                                                                                                                      6=N3:(Read w8 (Add w32 6 N1)
                                                                                                                                    arg_0),
                                                                                                                      5=N4:(Read w8 (Add w32 5 N1)
                                                                                                                                    arg_0),
                                                                                                                      4=N5:(Read w8 (Add w32 4 N1)
                                                                                                                                    arg_0),
                                                                                                                      3=N6:(Read w8 (Add w32 3 N1)
                                                                                                                                    arg_0),
                                                                                                                      2=N7:(Read w8 (Add w32 2 N1)
                                                                                                                                    arg_0),
                                                                                                                      1=N8:(Read w8 (Add w32 1 N1)
                                                                                                                                    arg_0),
                                                                                                                      0=N9:(Read w8 N1 arg_0)] @ const_arr65)
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48716000
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48716000
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=59
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42427728
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42427728
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307172
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr69))
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=59
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667777652
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667777652
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      63)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667777652
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr46)
main thread es->rtid=-1
Number of states=59
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42404176
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42404176
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42404176
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42404176
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45467408
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45467408
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48267488
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48267488
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42647744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42647744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42876736
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42876736
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49242848
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46351600
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46351600
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48569760
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48569760
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46351600
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46351600
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=59
Alloc'ing...
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=59
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667987876
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667987876
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      21)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667987876
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr31)
main thread es->rtid=-1
Number of states=59
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668377652
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668377652
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      16)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668377652
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr18)
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46873456
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46873456
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48668960
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48668960
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=59
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 43408704
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 43408704
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771044
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr56))
main thread es->rtid=-1
Number of states=59
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 49007296
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49007296
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45777760
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45777760
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=59
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45777760
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45777760
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46894992
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46894992
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48569760
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48569760
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307124
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr72))
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46542816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46542816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46542816
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46542816
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=59
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47524736
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47524736
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668374276
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668374276
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      35)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374276
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr21)
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
No info
Number of states=58
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45467408
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45467408
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49242848
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49242848
geptr final base: 49242848
main thread es->rtid=-1
Number of states=58
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47524736
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47524736
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668377652
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr18))
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49242848
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49242848
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46873456
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46873456
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 49007296
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49007296
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=58
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 47605712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47605712
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668374772
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668374772
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      88)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374772
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr20)
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 43029808
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 43029808
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42664144
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42664144
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965428
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr32))
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46894992
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46894992
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 47469648
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47469648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48575936
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48575936
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 47469648
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47469648
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46438928
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46438928
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667775844
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667775844
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      11)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775844
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr48)
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46740096
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46740096
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48564816
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48564816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46387008
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46387008
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48575936
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48575936
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46387008
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46387008
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=58
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48564816
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48564816
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374276
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr21))
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667770484
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667770484
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      4)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667770484
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr57)
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46726240
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46726240
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 43029808
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 43029808
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374772
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr20))
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42513328
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42513328
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=58
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
Alloc'ing...
main thread es->rtid=-1
Number of states=58
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49287344
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667776356
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667776356
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      23)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667776356
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr47)
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42513328
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42513328
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=58
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668371060
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668371060
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      33)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371060
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr27)
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
No info
Number of states=57
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45797888
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45797888
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=57
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48243024
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48243024
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 47458672
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47458672
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49287344
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49287344
geptr final base: 49287344
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48668080
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48668080
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49287344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49287344
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48243024
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48243024
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960900
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr38))
main thread es->rtid=-1
Number of states=57
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48362304
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48362304
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=57
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 43543264
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43543264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 47842752
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47842752
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48937984
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48937984
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=57
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 47458672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47458672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45470976
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45470976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42501952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42501952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 42945728
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42945728
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667773940
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667773940
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773940
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr51)
main thread es->rtid=-1
Number of states=57
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42501952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42501952
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667741940
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667741940
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741940
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr59)
main thread es->rtid=-1
Number of states=57
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 47717376
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47717376
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48362064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48362064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48362064
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48362064
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=57
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46726240
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46726240
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667777652
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr46))
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
Alloc'ing...
main thread es->rtid=-1
Number of states=57
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 43543264
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43543264
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=57
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45460800
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45460800
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 43463632
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 43463632
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45460800
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45460800
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=57
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45470976
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45470976
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=57
No info
Number of states=56
Alloc'ing...
main thread es->rtid=-1
Number of states=56
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46793184
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46793184
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668374228
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668374228
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      53)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374228
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr22)
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46793184
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46793184
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48242368
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48242368
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1KLEE: ERROR: (location information missing) memory error: out of bound pointer
KLEE: NOTE: now ignoring this error at this location

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
Info: 
	address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
	example: 42388080
	range: [42388080, 42388086]
	next: object at 43292176 of size 4
		MO920[4] allocated at usb_endpoint_maxp_mult():  %maxp = alloca i32, align 4
	prev: object at 41812352 of size 8
		MO72[8] allocated at usbtv_probe():  %ep = alloca %struct.usb_host_endpoint*, align 8

Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 47717376
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47717376
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=55
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48976656
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48976656
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 42000304
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42000304
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45537584
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45537584
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 42000304
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42000304
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42470272
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42470272
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 43463632
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 43463632
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667770484
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr57))
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45972960
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45972960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42470272
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42470272
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668374228
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr22))
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45430512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45430512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48242368
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48242368
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46438928
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46438928
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=55
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46740096
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46740096
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=55
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668373316
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668373316
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      353)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373316
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr24)
main thread es->rtid=-1
Number of states=55
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=55
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45430512
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45430512
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=55
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46387568
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46387568
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46387568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46387568
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49424464
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45851648
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45851648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42709888
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42709888
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
No info
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 47842752
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47842752
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=54
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=54
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42945728
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42945728
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=54
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49424464
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45972960
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45972960
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667776356
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr47))
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49424464
geptr final base: 49424464
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49424464
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49424464
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45851648
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45851648
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373316
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr24))
main thread es->rtid=-1
Number of states=54
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45537584
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45537584
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=54
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668372356
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668372356
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      30)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668372356
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr25)
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48261360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48261360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48976656
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48976656
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775844
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr48))
main thread es->rtid=-1
Number of states=54
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668373364
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668373364
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      31)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373364
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr23)
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48506624
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48506624
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 47424032
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47424032
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48668080
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48668080
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 47424032
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47424032
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48937984
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48937984
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667739268
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) U0:[7=N2:(Read w8 (Add w32 7 N1)
                                                                                                                                              arg_0),
                                                                                                                                6=N3:(Read w8 (Add w32 6 N1)
                                                                                                                                              arg_0),
                                                                                                                                5=N4:(Read w8 (Add w32 5 N1)
                                                                                                                                              arg_0),
                                                                                                                                4=N5:(Read w8 (Add w32 4 N1)
                                                                                                                                              arg_0),
                                                                                                                                3=N6:(Read w8 (Add w32 3 N1)
                                                                                                                                              arg_0),
                                                                                                                                2=N7:(Read w8 (Add w32 2 N1)
                                                                                                                                              arg_0),
                                                                                                                                1=N8:(Read w8 (Add w32 1 N1)
                                                                                                                                              arg_0),
                                                                                                                                0=N9:(Read w8 N1 arg_0)] @ const_arr65))
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42037440
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42037440
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46541792
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46541792
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 47896944
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47896944
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667780116
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667780116
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      239)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667780116
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr43)
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47387344
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47387344
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42037440
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42037440
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668373364
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr23))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 47896944
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47896944
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46541792
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46541792
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371060
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr27))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46075760
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46075760
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47387344
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47387344
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668372356
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr25))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48468512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48468512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667772260
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667772260
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      13)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772260
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr54)
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42709888
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42709888
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741940
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr59))
main thread es->rtid=-1
Number of states=54
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 49172784
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49172784
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 49172784
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49172784
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667741476
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667741476
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      3)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741476
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr61)
main thread es->rtid=-1
Number of states=54
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=54
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=54
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
Alloc'ing...
main thread es->rtid=-1
Number of states=54
No info
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42876736
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42876736
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740644
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) U0:[3=(Extract w8 24 N2:(And w32 (ZExt w32 (ReadLSB w16 N0 const_arr62))
                                                                                                                                                             2047)),
                                                                                                                                2=(Extract w8 16 N2),
                                                                                                                                1=(Extract w8 8 N2),
                                                                                                                                0=(Extract w8 0 N2)] @ const_arr62))
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668371012
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668371012
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      111)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371012
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr28)
main thread es->rtid=-1
Number of states=53
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667962340
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667962340
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      49)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667962340
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr36)
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
Alloc'ing...
main thread es->rtid=-1
Number of states=53
Alloc'ing...
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
Alloc'ing...
main thread es->rtid=-1
Number of states=53
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48468512
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48468512
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=53
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49289312
main thread es->rtid=-1
Number of states=53
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 41942368
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41942368
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
Alloc'ing...
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45746672
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45746672
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
Alloc'ing...
main thread es->rtid=-1
Number of states=53
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45746672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45746672
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=53
Alloc'ing...
main thread es->rtid=-1
Number of states=53
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49289312
main thread es->rtid=-1
Number of states=53
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667748948
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667748948
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      823)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667748948
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) arg_0)
main thread es->rtid=-1
Number of states=53
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49289312
geptr final base: 49289312
main thread es->rtid=-1
Number of states=53
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446604037105181444
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446604037105181444
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      1535)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105181444
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=53
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=53
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48506624
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48506624
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49289312
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49289312
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 41942368
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41942368
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667962340
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr36))
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45659392
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45659392
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45659392
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45659392
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 47496624
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47496624
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 41923360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41923360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 41923360
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41923360
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=53
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46139536
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46139536
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=53
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=53
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
Alloc'ing...
main thread es->rtid=-1
Number of states=53
No info
Number of states=52
main thread es->rtid=-1
Number of states=52
Alloc'ing...
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667965028
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667965028
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      43)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965028
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr33)
main thread es->rtid=-1
Number of states=52
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46139536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46139536
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=52
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=52
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446604037105177348
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446604037105177348
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      767)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105177348
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=52
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=52
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46542208
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46542208
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
Alloc'ing...
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
Alloc'ing...
main thread es->rtid=-1
Number of states=52
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48548672
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48548672
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48548672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48548672
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=52
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 43644512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43644512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=52
Alloc'ing...
main thread es->rtid=-1
Number of states=52
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=52
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48536448
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48536448
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48153040
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48153040
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48153040
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48153040
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 47840080
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47840080
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=52
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45832496
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45832496
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48536448
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48536448
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667741476
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr61))
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=52
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 41812352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41812352
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 47911360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47911360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=52
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46542208
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46542208
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=52
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 47911360
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47911360
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
main thread es->rtid=-1
Number of states=52
No info
Number of states=51
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073668371892
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073668371892
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      38)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371892
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr26)
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49142528
main thread es->rtid=-1
Number of states=51
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 43644512
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43644512
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49142528
geptr final base: 49142528
main thread es->rtid=-1
Number of states=51
Alloc'ing...
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49142528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49142528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48572000
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48572000
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46139264
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46139264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667990612
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667990612
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      816)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667990612
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr29)
main thread es->rtid=-1
Number of states=51
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46139264
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46139264
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371892
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr26))
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42687008
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42687008
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
Alloc'ing...
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48603232
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48603232
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
Alloc'ing...
main thread es->rtid=-1
Number of states=51
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42687008
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42687008
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772260
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr54))
main thread es->rtid=-1
Number of states=51
Alloc'ing...
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45797888
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45797888
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667987876
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr31))
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48572000
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48572000
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105177348
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr68))
main thread es->rtid=-1
Number of states=51
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 49344912
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49344912
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 49344912
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49344912
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46075760
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46075760
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773940
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr51))
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=51
Alloc'ing...
main thread es->rtid=-1
Number of states=51
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=51
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667781604
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667781604
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667781604
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr42)
main thread es->rtid=-1
Number of states=51
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=51
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 47840080
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47840080
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=51
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667961892
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667961892
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      324)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667961892
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr37)
main thread es->rtid=-1
Number of states=51
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 49207440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49207440
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 49207440
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49207440
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
Alloc'ing...
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48514192
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48514192
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
Alloc'ing...
main thread es->rtid=-1
Number of states=51
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 47496624
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47496624
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 47982480
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47982480
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48603232
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48603232
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037105181444
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr66))
main thread es->rtid=-1
Number of states=51
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 47982480
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47982480
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 41979424
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41979424
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=51
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48447520
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48447520
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
No info
Number of states=50
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45832496
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45832496
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073668371012
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr28))
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
Alloc'ing...
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=50
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667778292
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667778292
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      5)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778292
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr44)
main thread es->rtid=-1
Number of states=50
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45893152
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45893152
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667960516
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667960516
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960516
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr39)
main thread es->rtid=-1
Number of states=50
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49291888
main thread es->rtid=-1
Number of states=50
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 41979424
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41979424
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=50
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45893152
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45893152
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=50
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48362304
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48362304
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=50
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=50
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=50
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45854624
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45854624
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45854624
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45854624
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49291888
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49291888
geptr final base: 49291888
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48858784
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48858784
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48858784
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48858784
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49291888
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49291888
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
No info
Number of states=49
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667771700
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667771700
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      71)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771700
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr55)
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49424464
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46268560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46268560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
Alloc'ing...
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
Alloc'ing...
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 43671392
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 43671392
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
Alloc'ing...
main thread es->rtid=-1
Number of states=49
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46268560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46268560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667961892
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr37))
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 43851472
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43851472
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48780992
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48780992
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46431248
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46431248
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 43851472
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43851472
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 49172784
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 49172784
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48780992
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48780992
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667990612
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr29))
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 49172784
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 49172784
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667771700
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr55))
main thread es->rtid=-1
Number of states=49
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=49
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=49
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667960084
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667960084
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      923)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960084
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr40)
main thread es->rtid=-1
Number of states=49
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=49
Alloc'ing...
main thread es->rtid=-1
Number of states=49
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45942016
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45942016
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49410848
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45942016
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45942016
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42444608
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42444608
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 49203424
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49203424
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 49203424
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49203424
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667740084
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667740084
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740084
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr63)
main thread es->rtid=-1
Number of states=49
No info
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=48
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=48
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667773380
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667773380
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773380
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr52)
main thread es->rtid=-1
Number of states=48
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49410848
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49410848
geptr final base: 49410848
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49410848
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49410848
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 42647744
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42647744
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=48
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45832208
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45832208
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
Alloc'ing...
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
Alloc'ing...
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
Alloc'ing...
main thread es->rtid=-1
Number of states=48
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42268560
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42268560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=48
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42268560
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42268560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=48
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=48
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45993024
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45993024
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45993024
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45993024
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46814480
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46814480
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=48
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46814480
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46814480
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
No info
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
Alloc'ing...
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=47
Alloc'ing...
main thread es->rtid=-1
Number of states=47
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=47
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=47
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
Alloc'ing...
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
Alloc'ing...
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
Alloc'ing...
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42318352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42318352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42318352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42318352
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=47
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667963588
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667963588
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      499)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667963588
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr35)
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48261360
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48261360
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48412016
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48412016
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48514192
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48514192
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667965028
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr33))
main thread es->rtid=-1
Number of states=47
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48412016
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48412016
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 43671392
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 43671392
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667748948
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) arg_0))
main thread es->rtid=-1
Number of states=47
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=47
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49417376
main thread es->rtid=-1
Number of states=47
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45779488
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45779488
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45779488
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45779488
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=47
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46431248
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46431248
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778292
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr44))
main thread es->rtid=-1
Number of states=47
No info
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=46
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49627440
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49622288
geptr final base: 49622288
main thread es->rtid=-1
Number of states=46
Alloc'ing...
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49627440
main thread es->rtid=-1
Number of states=46
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45832208
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45832208
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=46
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49627440
geptr final base: 49627440
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49627440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49627440
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=46
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49622288
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49622288
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 49159664
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 49159664
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42444608
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42444608
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960516
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr39))
main thread es->rtid=-1
Number of states=46
Alloc'ing...
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
Alloc'ing...
main thread es->rtid=-1
Number of states=46
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=46
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=46
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667742660
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667742660
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      3)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667742660
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr58)
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 42421536
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 42421536
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 49159664
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 49159664
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667781604
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr42))
main thread es->rtid=-1
Number of states=46
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
Alloc'ing...
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48562976
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48562976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48562976
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48562976
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=46
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46137664
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46137664
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46137664
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46137664
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 49548944
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49548944
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 49548944
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49548944
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=46
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
Alloc'ing...
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=46
No info
Number of states=45
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=45
Alloc'ing...
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
Alloc'ing...
main thread es->rtid=-1
Number of states=45
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48447520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48447520
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 44408032
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44408032
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 44408032
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44408032
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 49152768
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49152768
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667964532
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667964532
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      48)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667964532
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr34)
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
Alloc'ing...
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=45
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 43469712
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 43469712
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45900128
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45900128
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
Alloc'ing...
main thread es->rtid=-1
Number of states=45
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=45
Alloc'ing...
main thread es->rtid=-1
Number of states=45
Alloc'ing...
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46824528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46824528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46164992
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46164992
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46824528
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46824528
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=45
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=45
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45840240
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45840240
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=45
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 49152768
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49152768
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 47622336
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47622336
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49413424
main thread es->rtid=-1
Number of states=45
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 47622336
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47622336
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=45
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48416064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48416064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=45
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45777760
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45777760
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48416064
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48416064
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=45
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 49235696
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49235696
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=45
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 42421536
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 42421536
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667960084
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr40))
main thread es->rtid=-1
Number of states=45
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 49235696
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49235696
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=45
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
No info
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 41811152
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811152
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49641360
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 41811152
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811152
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 43469712
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 43469712
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667773380
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr52))
main thread es->rtid=-1
Number of states=44
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=44
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446604037060307156
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446604037060307156
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307156
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr70)
main thread es->rtid=-1
Number of states=44
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49641360
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
No info
Number of states=43
main thread es->rtid=-1
Number of states=43
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49641360
geptr final base: 49641360
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49641360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49641360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=43
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 44847088
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 44847088
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=43
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 43542944
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 43542944
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49636208
main thread es->rtid=-1
Number of states=43
Alloc'ing...
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
Alloc'ing...
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
Alloc'ing...
main thread es->rtid=-1
Number of states=43
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=43
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 44422816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44422816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=43
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 43542944
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 43542944
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667963588
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr35))
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667778004
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667778004
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      38)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778004
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr45)
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 44422816
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44422816
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=43
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45777760
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45777760
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667780116
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr43))
main thread es->rtid=-1
Number of states=43
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=43
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=43
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46643072
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46643072
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46643072
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46643072
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=43
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 45900128
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45900128
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=43
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=43
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=43
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46331280
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46331280
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 44847088
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 44847088
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667964532
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr34))
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
Alloc'ing...
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45787968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45787968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
Alloc'ing...
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45787968
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45787968
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=43
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667782068
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667782068
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667782068
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr41)
main thread es->rtid=-1
Number of states=43
Alloc'ing...
main thread es->rtid=-1
Number of states=43
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
main thread es->rtid=-1
Number of states=43
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 46164992
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46164992
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=43
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=43
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=43
No info
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 49500288
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49500288
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 49500288
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49500288
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=42
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=42
Alloc'ing...
main thread es->rtid=-1
Number of states=42
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=42
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 48234736
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48234736
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 41440176
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41440176
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=42
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=42
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49424464
main thread es->rtid=-1
Number of states=42
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 41440176
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41440176
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 47322912
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 47322912
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=42
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49410848
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48087552
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48087552
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 48234736
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48234736
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor* (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48087552
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48087552
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=42
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
No info
Number of states=41
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45840240
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45840240
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667742660
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr58))
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49622288
geptr final base: 49622288
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49417376
main thread es->rtid=-1
Number of states=41
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49622288
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49622288
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=41
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46331280
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46331280
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307156
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr70))
main thread es->rtid=-1
Number of states=41
Alloc'ing...
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45432368
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45432368
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49424464
geptr final base: 49424464
main thread es->rtid=-1
Number of states=41
Alloc'ing...
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45432368
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45432368
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667782068
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr41))
main thread es->rtid=-1
Number of states=41
Alloc'ing...
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42064576
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42064576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42064576
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42064576
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=41
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=41
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=41
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49627440
main thread es->rtid=-1
Number of states=41
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48568512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48568512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48568512
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48568512
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49417376
geptr final base: 49417376
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446604037060307140
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446604037060307140
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      7)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307140
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr71)
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46306000
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46306000
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46306000
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46306000
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49661968
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=41
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 47322912
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 47322912
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667740084
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr63))
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667775236
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667775236
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      80)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775236
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr49)
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=41
main thread es->rtid=-1
Number of states=41
No info
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=40
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49661968
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49667120
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=40
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49661968
geptr final base: 49661968
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49661968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49661968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49651664
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
Alloc'ing...
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
Alloc'ing...
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49667120
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
Alloc'ing...
main thread es->rtid=-1
Number of states=40
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48455184
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48455184
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=40
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48455184
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48455184
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=40
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=40
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=40
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=40
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=40
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr offset: 4
geptr base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
geptr final base: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46828256
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46828256
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46828256
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46828256
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667772820
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667772820
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      15)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772820
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr53)
main thread es->rtid=-1
Number of states=40
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=40
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49667120
geptr final base: 49667120
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 41813168
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41813168
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49413424
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46282864
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46282864
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46282864
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46282864
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=40
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49667120
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49667120
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=40
No info
Number of states=39
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49651664
main thread es->rtid=-1
Number of states=39
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49651664
geptr final base: 49651664
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49651664
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49651664
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
Alloc'ing...
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
Alloc'ing...
main thread es->rtid=-1
Number of states=39
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
Alloc'ing...
main thread es->rtid=-1
Number of states=39
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 47060208
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47060208
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=39
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 47060208
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47060208
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45412704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45412704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45412704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45412704
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49677424
main thread es->rtid=-1
Number of states=39
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
Alloc'ing...
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 41944512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41944512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=39
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=39
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=39
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 41944512
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41944512
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=39
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
Alloc'ing...
main thread es->rtid=-1
Number of states=39
No info
Number of states=38
main thread es->rtid=-1
Number of states=38
Alloc'ing...
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48583648
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48583648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49622288
geptr final base: 49622288
main thread es->rtid=-1
Number of states=38
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49627440
main thread es->rtid=-1
Number of states=38
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48583648
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48583648
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49656816
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49622288
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49622288
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=38
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 41944512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41944512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 41944512
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41944512
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=38
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=38
Alloc'ing...
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=38
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 43968432
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43968432
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49413424
geptr final base: 49413424
main thread es->rtid=-1
Number of states=38
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 43968432
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43968432
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=38
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=38
Alloc'ing...
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
Alloc'ing...
main thread es->rtid=-1
Number of states=38
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48091904
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48091904
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=38
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49641360
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=38
No info
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46164320
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46164320
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46164320
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46164320
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=37
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=37
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49646512
geptr final base: 49646512
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=37
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 41813168
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 41813168
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667775236
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr49))
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49646512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49646512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49413424
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49413424
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48013392
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48013392
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop (Add w64 4
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
default offset for target address (Add w64 18446744073667774500
          (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                  (ReadLSB w64 0 arg_0))) arg_0))
bounds check expression (Ult (Add w64 18446744073667774500
               (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073667749008
                                                       (ReadLSB w64 0 arg_0))) arg_0))
      14)
in bounds? 1
Is i16 (count=0) to be lazy init?
 load result: (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667774500
                                         (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                 (ReadLSB w64 0 arg_0))) arg_0))) const_arr50)
main thread es->rtid=-1
Number of states=37
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48013392
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48013392
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=37
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 48830208
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 48830208
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48941968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48941968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48941968
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48941968
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
Alloc'ing...
main thread es->rtid=-1
Number of states=37
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48830208
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48830208
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667778004
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr45))
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=37
Alloc'ing...
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
No info
Number of states=36
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49627440
geptr final base: 49627440
main thread es->rtid=-1
Number of states=36
Alloc'ing...
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 41906384
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41906384
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49424464
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49424464
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41906384
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41906384
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=36
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49672272
main thread es->rtid=-1
Number of states=36
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=36
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=36
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=36
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=36
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49410848
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 48091904
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 48091904
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446604037060307140
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr71))
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49417376
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49417376
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49682576
main thread es->rtid=-1
Number of states=36
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49713488
main thread es->rtid=-1
Number of states=36
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=36
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48281168
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48281168
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48281168
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48281168
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 45738176
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45738176
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=36
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49410848
geptr final base: 49410848
main thread es->rtid=-1
Number of states=36
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45687360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45687360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49713488
main thread es->rtid=-1
Number of states=36
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=36
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45687360
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45687360
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=36
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49661968
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
main thread es->rtid=-1
Number of states=36
No info
Number of states=35
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49713488
geptr final base: 49713488
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49713488
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49713488
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49622288
main thread es->rtid=-1
Number of states=35
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49641360
main thread es->rtid=-1
Number of states=35
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49698032
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49641360
geptr final base: 49641360
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49636208
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49622288
geptr final base: 49622288
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49622288
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49622288
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=35
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49687728
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 41868176
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41868176
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41868176
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41868176
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49667120
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49677424
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49677424
geptr final base: 49677424
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 44014560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 44014560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49641360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49641360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46139264
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46139264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49410848
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49410848
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46139264
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46139264
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49636208
geptr final base: 49636208
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=35
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=35
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49692880
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=35
Alloc'ing...
main thread es->rtid=-1
Number of states=35
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49651664
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45652880
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45652880
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 45738176
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45738176
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667772820
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr53))
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=35
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49703184
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42575952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42575952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42575952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42575952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=35
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45652880
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45652880
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=35
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49672272
main thread es->rtid=-1
Number of states=35
No info
Number of states=34
main thread es->rtid=-1
Number of states=34
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=34
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=34
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=34
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49627440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49627440
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49646512
geptr final base: 49646512
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 43042480
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43042480
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49646512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49646512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49672272
geptr final base: 49672272
main thread es->rtid=-1
Number of states=34
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 43042480
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43042480
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=34
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
Alloc'ing...
main thread es->rtid=-1
Number of states=34
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
Alloc'ing...
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49703184
main thread es->rtid=-1
Number of states=34
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49708336
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46417440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46417440
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49677424
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49677424
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
Alloc'ing...
main thread es->rtid=-1
Number of states=34
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49672272
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49672272
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49703184
geptr final base: 49703184
main thread es->rtid=-1
Number of states=34
Alloc'ing...
main thread es->rtid=-1
Number of states=34
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46417440
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46417440
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=34
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42770032
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42770032
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42770032
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42770032
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=34
No info
Number of states=33
Alloc'ing...
main thread es->rtid=-1
Number of states=33
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=33
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=33
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=33
Alloc'ing...
main thread es->rtid=-1
Number of states=33
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 42520896
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42520896
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=33
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49703184
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49703184
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49636208
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49636208
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 42520896
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42520896
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=33
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=33
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=33
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 41923360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41923360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
Alloc'ing...
main thread es->rtid=-1
Number of states=33
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 41923360
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41923360
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=33
Alloc'ing...
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
No info
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 44014560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 44014560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32 (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 N0:(Extract w32 0 (Add w64 18446744073667774500
                                                   (ReadLSB w64 N1:(Extract w32 0 (Add w64 18446744073667749008
                                                                                           (ReadLSB w64 0 arg_0))) arg_0))) const_arr50))
main thread es->rtid=-1
Number of states=32
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=32
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49667120
main thread es->rtid=-1
Number of states=32
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49667120
geptr final base: 49667120
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49667120
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49667120
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42331552
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42331552
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42331552
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42331552
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=32
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=32
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49661968
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 49134832
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49134832
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49651664
main thread es->rtid=-1
Number of states=32
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 49134832
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49134832
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=32
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48547808
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48547808
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48566208
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48566208
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49692880
main thread es->rtid=-1
Number of states=32
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
Alloc'ing...
main thread es->rtid=-1
Number of states=32
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48566208
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48566208
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46682320
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46682320
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 44124096
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44124096
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49651664
geptr final base: 49651664
main thread es->rtid=-1
Number of states=32
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 44124096
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44124096
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=32
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48547808
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48547808
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=32
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46682320
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46682320
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49661968
geptr final base: 49661968
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=32
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49646512
geptr final base: 49646512
main thread es->rtid=-1
Number of states=32
No info
Number of states=31
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=31
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=31
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49646512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49646512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49656816
main thread es->rtid=-1
Number of states=31
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=31
Alloc'ing...
main thread es->rtid=-1
Number of states=31
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49692880
geptr final base: 49692880
main thread es->rtid=-1
Number of states=31
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 47377936
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47377936
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 47377936
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47377936
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=31
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=31
Alloc'ing...
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46143968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46143968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=31
Alloc'ing...
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49692880
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49692880
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
Alloc'ing...
main thread es->rtid=-1
Number of states=31
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49656816
geptr final base: 49656816
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 44350704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44350704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 44350704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44350704
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
Alloc'ing...
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 42651264
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42651264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 43463328
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43463328
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46143968
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46143968
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=31
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 43463328
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43463328
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49651664
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49651664
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
Alloc'ing...
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 47237296
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47237296
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 47237296
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47237296
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49656816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49656816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=31
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=31
No info
Number of states=30
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=30
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=30
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=30
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=30
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 42988544
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42988544
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 42988544
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42988544
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=30
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49253952
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=30
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=30
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49682576
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
Alloc'ing...
main thread es->rtid=-1
Number of states=30
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42667312
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42667312
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=30
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
Alloc'ing...
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
Alloc'ing...
main thread es->rtid=-1
Number of states=30
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49703184
main thread es->rtid=-1
Number of states=30
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=30
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42667312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42667312
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=30
Alloc'ing...
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 42651264
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42651264
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
Alloc'ing...
main thread es->rtid=-1
Number of states=30
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=30
Alloc'ing...
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=30
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49703184
main thread es->rtid=-1
Number of states=30
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=30
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49703184
geptr final base: 49703184
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
Alloc'ing...
main thread es->rtid=-1
Number of states=30
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=30
No info
Number of states=29
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49708336
main thread es->rtid=-1
Number of states=29
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49703184
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49703184
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49720272
main thread es->rtid=-1
Number of states=29
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=29
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49682576
geptr final base: 49682576
main thread es->rtid=-1
Number of states=29
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=29
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49682576
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49682576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48259248
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48259248
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48259248
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48259248
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=29
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46583584
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46583584
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=29
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=29
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 43010768
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43010768
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=29
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 43010768
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43010768
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=29
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49661968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49661968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
Alloc'ing...
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
No info
Number of states=28
main thread es->rtid=-1
Number of states=28
Alloc'ing...
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48579552
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48579552
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49708336
geptr final base: 49708336
main thread es->rtid=-1
Number of states=28
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49708336
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49708336
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48579552
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48579552
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48985808
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48985808
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=28
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48562976
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48562976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48362064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48362064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=28
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48562976
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48562976
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=28
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=28
Alloc'ing...
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46556624
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46556624
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48362064
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48362064
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=28
Alloc'ing...
main thread es->rtid=-1
Number of states=28
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 43010768
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43010768
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49687728
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48356016
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48356016
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48985808
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48985808
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=28
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 43010768
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43010768
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=28
No info
Number of states=27
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=27
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48356016
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48356016
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=27
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=27
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=27
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49687728
geptr final base: 49687728
main thread es->rtid=-1
Number of states=27
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=27
Alloc'ing...
main thread es->rtid=-1
Number of states=27
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=27
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 44071088
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44071088
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=27
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 47092784
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47092784
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=27
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=27
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45746672
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45746672
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=27
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=27
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45746672
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45746672
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=27
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 47092784
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47092784
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=27
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49667120
main thread es->rtid=-1
Number of states=27
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 44071088
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44071088
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=27
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=27
Alloc'ing...
main thread es->rtid=-1
Number of states=27
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46611696
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46611696
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=27
No info
Number of states=26
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46611696
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46611696
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=26
main thread es->rtid=-1
Number of states=26
main thread es->rtid=-1
Number of states=26
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49687728
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49687728
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=26
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=26
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48582480
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48582480
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=26
main thread es->rtid=-1
Number of states=26
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=26
No info
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49698032
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 47990192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47990192
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46556624
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46556624
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48582480
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48582480
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 47990192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47990192
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=25
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49698032
geptr final base: 49698032
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46404064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46404064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48113312
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48113312
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49692880
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46404064
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46404064
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46583584
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46583584
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49692880
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49692880
geptr final base: 49692880
main thread es->rtid=-1
Number of states=25
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49253952
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46981456
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46981456
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46981456
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46981456
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49253952
geptr final base: 49253952
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49692880
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49692880
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46431248
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46431248
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 44350640
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44350640
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=25
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=25
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49698032
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49698032
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=25
Alloc'ing...
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 44128816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44128816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46431248
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46431248
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 47943552
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47943552
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 44128816
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44128816
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=25
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49736736
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 47750016
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47750016
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=25
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 47750016
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47750016
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=25
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=25
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49720272
main thread es->rtid=-1
Number of states=25
No info
Number of states=24
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
Alloc'ing...
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48491600
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48491600
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
Alloc'ing...
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49253952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49253952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49646512
main thread es->rtid=-1
Number of states=24
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=24
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49646512
geptr final base: 49646512
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46252784
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46252784
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48491600
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48491600
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 44613824
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44613824
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46252784
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46252784
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=24
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=24
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=24
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49641360
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49646512
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49646512
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
Alloc'ing...
main thread es->rtid=-1
Number of states=24
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=24
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=24
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=24
Alloc'ing...
main thread es->rtid=-1
Number of states=24
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 42389264
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42389264
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48201648
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48201648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48113312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48113312
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
Alloc'ing...
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 47943552
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47943552
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=24
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 41929792
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41929792
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=24
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 41929792
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41929792
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=24
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 42389264
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42389264
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=24
Alloc'ing...
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49720272
geptr final base: 49720272
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
Alloc'ing...
main thread es->rtid=-1
Number of states=24
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=24
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=24
main thread es->rtid=-1
Number of states=24
No info
Number of states=23
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42627728
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42627728
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=23
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=23
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=23
main thread es->rtid=-1
Number of states=23
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42627728
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42627728
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=23
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46644160
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46644160
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=23
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49736736
main thread es->rtid=-1
Number of states=23
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48370848
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48370848
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=23
main thread es->rtid=-1
Number of states=23
main thread es->rtid=-1
Number of states=23
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46644160
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46644160
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=23
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 44350640
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44350640
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=23
main thread es->rtid=-1
Number of states=23
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=23
Alloc'ing...
main thread es->rtid=-1
Number of states=23
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48201648
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48201648
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=23
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=23
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=23
Alloc'ing...
main thread es->rtid=-1
Number of states=23
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46818288
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46818288
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=23
No info
Number of states=22
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49720272
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49720272
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 44613824
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44613824
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
Alloc'ing...
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45840240
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45840240
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=22
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45840240
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45840240
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=22
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 41941760
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41941760
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 49258032
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258032
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48370848
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48370848
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=22
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45943008
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45943008
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 49258032
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49258032
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=22
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46818288
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46818288
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=22
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45943008
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45943008
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49736736
geptr final base: 49736736
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49736736
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49736736
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48590784
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48590784
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=22
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49667120
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=22
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41941760
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41941760
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48243456
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48243456
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=22
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48243456
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48243456
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=22
main thread es->rtid=-1
Number of states=22
Alloc'ing...
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=22
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=22
No info
Number of states=21
No info
Number of states=20
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=20
Alloc'ing...
main thread es->rtid=-1
Number of states=20
Alloc'ing...
main thread es->rtid=-1
Number of states=20
Alloc'ing...
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46873456
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46873456
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46873456
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46873456
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=20
Alloc'ing...
main thread es->rtid=-1
Number of states=20
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48243456
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48243456
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=20
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48601952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48601952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=20
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48243456
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48243456
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49667120
geptr final base: 49667120
main thread es->rtid=-1
Number of states=20
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=20
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45856096
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45856096
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=20
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=20
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45856096
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45856096
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=20
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48176432
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48176432
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=20
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48176432
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48176432
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=20
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45445024
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45445024
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45445024
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45445024
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=20
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=20
main thread es->rtid=-1
Number of states=20
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=20
No info
Number of states=19
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 47858464
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47858464
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=19
main thread es->rtid=-1
Number of states=19
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48601952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48601952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=19
No info
Number of states=18
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=18
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42430752
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42430752
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=18
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42430752
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42430752
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=18
main thread es->rtid=-1
Number of states=18
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=18
No info
Number of states=17
memory operation
  store i32 %mul, i32* %size, align 4
 address: 41810976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 41810976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45422720
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45422720
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48590784
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48590784
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
main thread es->rtid=-1
Number of states=17
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 47858464
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47858464
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=17
main thread es->rtid=-1
Number of states=17
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49641360
main thread es->rtid=-1
Number of states=17
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=17
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=17
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=17
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49667120
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49667120
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 43557872
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 43557872
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
main thread es->rtid=-1
Number of states=17
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48583648
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48583648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48656272
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48656272
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48656272
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48656272
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=17
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45481088
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45481088
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45748176
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45748176
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=17
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=17
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48583648
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48583648
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45748176
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45748176
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=17
main thread es->rtid=-1
Number of states=17
main thread es->rtid=-1
Number of states=17
main thread es->rtid=-1
Number of states=17
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 45422720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45422720
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=17
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=17
No info
Number of states=16
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42782192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42782192
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=16
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45481088
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45481088
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=16
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 43557872
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 43557872
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=16
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42782192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42782192
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
No info
Number of states=15
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49641360
geptr final base: 49641360
main thread es->rtid=-1
Number of states=15
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46198688
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46198688
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=15
Alloc'ing...
main thread es->rtid=-1
Number of states=15
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46198688
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46198688
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=15
main thread es->rtid=-1
Number of states=15
main thread es->rtid=-1
Number of states=15
main thread es->rtid=-1
Number of states=15
main thread es->rtid=-1
Number of states=15
No info
Number of states=14
Alloc'ing...
main thread es->rtid=-1
Number of states=14
main thread es->rtid=-1
Number of states=14
No info
Number of states=13
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46493216
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46493216
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=13
Alloc'ing...
main thread es->rtid=-1
Number of states=13
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=13
Alloc'ing...
main thread es->rtid=-1
Number of states=13
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46067376
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46067376
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=13
Alloc'ing...
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
Number of states=13
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=13
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=13
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46601216
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46601216
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
Number of states=13
main thread es->rtid=-1
Number of states=13
No info
Number of states=12
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46601216
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46601216
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=12
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46493216
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46493216
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=12
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 47857280
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47857280
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=12
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 49148528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49148528
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=12
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46067376
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46067376
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=12
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46799536
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46799536
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=12
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 47857280
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47857280
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=12
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46799536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46799536
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=12
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=12
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=12
main thread es->rtid=-1
Number of states=12
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=12
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 49148528
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49148528
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=12
main thread es->rtid=-1
Number of states=12
main thread es->rtid=-1
Number of states=12
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=12
No info
Number of states=11
main thread es->rtid=-1
Number of states=11
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=11
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=11
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46034432
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46034432
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46034432
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46034432
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=11
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49641360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49641360
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=11
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=11
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=11
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=11
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 47990064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47990064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 44024576
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44024576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=11
Alloc'ing...
main thread es->rtid=-1
Number of states=11
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 44024576
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44024576
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 48943648
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48943648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=11
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=11
Alloc'ing...
main thread es->rtid=-1
Number of states=11
No info
Number of states=10
Alloc'ing...
main thread es->rtid=-1
Number of states=10
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 45813136
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45813136
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=10
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=10
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 45813136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45813136
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=10
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48266960
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48266960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 47990064
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47990064
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=10
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 48943648
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48943648
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=10
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48266960
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48266960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=10
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49424464
main thread es->rtid=-1
Number of states=10
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=10
main thread es->rtid=-1
Number of states=10
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=10
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 47293872
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 47293872
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=10
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46894992
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46894992
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=10
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=10
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 47293872
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 47293872
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=10
Alloc'ing...
main thread es->rtid=-1
Number of states=10
No info
Number of states=9
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46894992
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46894992
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=9
main thread es->rtid=-1
Number of states=9
No info
Number of states=8
No info
Number of states=7
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 49435712
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49435712
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49258064
main thread es->rtid=-1
Number of states=7
No info
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 49133680
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49133680
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46349136
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46349136
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 49133680
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49133680
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=6
No info
Number of states=5
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46349136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46349136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49258064
geptr final base: 49258064
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46836272
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46836272
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 46836272
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46836272
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=5
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 49435712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49435712
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 48583648
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48583648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
No info
Number of states=4
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49258064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49258064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 48583648
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48583648
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=4
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
No info
Number of states=3
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 41811536
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811536
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802720
main thread es->rtid=-1
Number of states=3
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 41811920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41811920
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 49424464
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 49424464
geptr final base: 49424464
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 49424464
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49424464
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 44015936
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 44015936
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 44015936
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 44015936
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 41809712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41809712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46726128
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46726128
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
No info
Number of states=2
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46726128
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46726128
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 48362064
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 48362064
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 48362064
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 48362064
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 41802672
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 41802672
geptr offset: 48
geptr base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=2
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 49236768
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 49236768
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 49236768
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 49236768
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 41802720
geptr final base: 41802720
main thread es->rtid=-1
Number of states=2
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 41802720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 41802720
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46265920
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46265920
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8  %2 = load %struct.device*, %struct.device** %__mptr, align 8

 address: 46265920
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46265920
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.device* (count=0) to be lazy init?
 load result: (ReadLSB w64 48 arg_0)
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: (ReadLSB w64 48 arg_0)
geptr offset: 18446744073709551464
geptr base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
geptr final base: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 42715248
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 42715248
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

 address: 42715248
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 42715248
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 45868848
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45868848
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
No info
Number of states=1
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp  %5 = load %struct.usb_device*, %struct.usb_device** %tmp

KLEE: done: total instructions = 4853
KLEE: done: completed paths = 154
KLEE: done: generated tests = 79

 address: 45868848
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45868848
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_device* (count=0) to be lazy init?
 load result: (Add w64 18446744073709551464
          (ReadLSB w64 48 arg_0))
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
No info
