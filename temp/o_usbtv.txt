KLEE: output directory is "/home/tuba/Documents/tools/klee-3.8/temp/klee-out-3"
KLEE: Using STP solver backend
KLEE: WARNING: undefined reference to function: __kmalloc
KLEE: WARNING: undefined reference to function: _dev_info
KLEE: WARNING: undefined reference to function: kfree
KLEE: WARNING: undefined reference to function: refcount_inc
KLEE: WARNING: undefined reference to function: usb_control_msg
KLEE: WARNING: undefined reference to function: usb_deregister
KLEE: WARNING: undefined reference to function: usb_get_dev
KLEE: WARNING: undefined reference to function: usb_put_dev
KLEE: WARNING: undefined reference to function: usb_register_driver
KLEE: WARNING: undefined reference to function: usbtv_audio_free
KLEE: WARNING: undefined reference to function: usbtv_audio_init
KLEE: WARNING: undefined reference to function: usbtv_video_free
KLEE: WARNING: undefined reference to function: usbtv_video_init
KLEE: WARNING: undefined reference to function: v4l2_device_put
Lazy initialization is ON 
arg 0 type %struct.usb_interface*
allocation size: 824
binding arg 0 of type %struct.usb_interface* to address 46236496
arg 1 type %struct.usb_device_id*
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_device_id* %id, %struct.usb_device_id** %id.addr, align 8
 address: 46243536
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46243536
default offset for target address 0
base memory address 46243536
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %dev1 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 46236496
geptr offset: 48
geptr base: 46236544
geptr final base: 46236544
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.device* %dev1, %struct.device** %dev, align 8
 address: 46245392
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46245392
default offset for target address 0
base memory address 46245392
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %num_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %1, i32 0, i32 2
 initial base: 46236496
geptr offset: 16
geptr base: 46236512
geptr final base: 46236512
main thread es->rtid=-1
Number of states=1
memory operation
  %2 = load i32, i32* %num_altsetting, align 4  %2 = load i32, i32* %num_altsetting, align 4
Framework dts:
data type=struct.usb_interface num inst=1
data type=struct.usbtv num inst=1
data type=struct.usb_device_id num inst=1
data type=struct.usb_host_endpoint num inst=1
data type=struct.usb_host_interface num inst=2
data type=i8 num inst=10
data type=i32 num inst=10
data type=struct.device num inst=1
data type=struct.usb_device num inst=1
data type=struct.v4l2_device num inst=1
data type=struct.v4l2_ctrl_handler num inst=1
data type=struct.video_device num inst=1
data type=struct.vb2_queue num inst=1
data type=struct.snd_card num inst=1
data type=struct.snd_pcm_substream num inst=1
data type=struct.urb num inst=1
data type=struct.usbtv_buf num inst=1
data type=struct.usb_endpoint_descriptor num inst=1

 address: 46236512
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46236512
default offset for target address 16
base memory address 46236496
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 16 arg_0)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=2
memory operation
  store i32 -19, i32* %retval
 address: 46242816
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %3 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=2
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 2
                 (ReadLSB w32 16 arg_0)))]
        false)

 address: 46242816
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=2
Number of states=1
GetElementPtr info:
  %altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %3, i32 0, i32 0
 initial base: 46236496
geptr final base: 46236496
main thread es->rtid=-1
Number of states=1
memory operation
  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8

 address: 46236496
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46236496
default offset for target address 0
base memory address 46236496
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface** (count=2) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 arg_0)
Allocating memory for type %struct.usb_host_interface = type { %struct.usb_interface_descriptor, i32, i8*, %struct.usb_host_endpoint*, i8* } of size 
allocation size: 80
lazy initializing writing 46252784 to 46236496
memory operation
  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8
 address: 46236496
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46236496
default offset for target address 0
base memory address 46236496
(forced) offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 46252784
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %arrayidx = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %4, i64 1
 initial base: 46252784
geptr offset: 40
geptr base: 46252824
geptr final base: 46252824
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
 initial base: 46252824
geptr final base: 46252824
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %bNumEndpoints = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 4
 initial base: 46252824
geptr offset: 4
geptr base: 46252828
geptr final base: 46252828
main thread es->rtid=-1
Number of states=1
memory operation
  %5 = load i8, i8* %bNumEndpoints, align 1  %5 = load i8, i8* %bNumEndpoints, align 1

 address: 46252828
executeMemoryOperation isWrite? 0
width for the memop: 8
bytes for the memop: 1
address for memop 46252828
default offset for target address 44
base memory address 46252784
bounds check expression true
in bounds? 1
Is i8* (count=0) to be lazy init?
 load result: (Read w8 44 %struct.usb_host_interface**)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=2
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
 initial base: 46236496
geptr final base: 46236496
main thread es->rtid=-1
Number of states=2
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8
 address: 46236496
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46236496
default offset for target address 0
base memory address 46236496
bounds check expression true
in bounds? 1
 load result: 46252784
main thread es->rtid=-1
Number of states=2
memory operation
  store i32 -19, i32* %retval
 address: 46242816
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: 46252784
geptr offset: 40
geptr base: 46252824
geptr final base: 46252824
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %40 = load i32, i32* %retval
 address: 46242816
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: 46252824
geptr offset: 24
geptr base: 46252848
geptr final base: 46252848
main thread es->rtid=-1
Number of states=2
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8

 address: 46252848
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46252848
default offset for target address 64
base memory address 46252784
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 64 %struct.usb_host_interface**)
Allocating memory for type %struct.usb_host_endpoint = type <{ %struct.usb_endpoint_descriptor, %struct.usb_ss_ep_comp_descriptor, %struct.usb_ssp_isoc_ep_comp_descriptor, i8, %struct.list_head, i8*, %struct.ep_device*, i8*, i32, i32, i32, [4 x i8] }> of size 
allocation size: 80
lazy initializing writing 46249952 to 46252848
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8
Path constraint:
array %struct.usb_host_interface**[80] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Eq 4 (Read w8 44 %struct.usb_host_interface**)))]
        false)

 address: 46252848
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46252848
default offset for target address 64
base memory address 46252784
(forced) offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 46249952
main thread es->rtid=-1
Number of states=2
Number of states=1
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: 46249952
geptr final base: 46249952
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 46246256
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46246256
default offset for target address 0
base memory address 46246256
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8
 address: 46246256
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46246256
default offset for target address 0
base memory address 46246256
bounds check expression true
in bounds? 1
 load result: 46249952
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: 46249952
geptr final base: 46249952
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46245360
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46245360
default offset for target address 0
base memory address 46245360
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 46245360
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245360
default offset for target address 0
base memory address 46245360
bounds check expression true
in bounds? 1
 load result: 46249952
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 46249952
geptr offset: 4
geptr base: 46249956
geptr final base: 46249956
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 46249956
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 46249956
default offset for target address 4
base memory address 46249952
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_host_endpoint**)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %call, i32* %size, align 4
 address: 46244832
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46244832
default offset for target address 0
base memory address 46244832
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 46244832
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46244832
default offset for target address 0
base memory address 46244832
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_host_endpoint**))
          2047)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8
 address: 46246256
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46246256
default offset for target address 0
base memory address 46246256
bounds check expression true
in bounds? 1
 load result: 46249952
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: 46249952
geptr final base: 46249952
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45622544
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45622544
default offset for target address 0
base memory address 45622544
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 45622544
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45622544
default offset for target address 0
base memory address 45622544
bounds check expression true
in bounds? 1
 load result: 46249952
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 46249952
geptr offset: 4
geptr base: 46249956
geptr final base: 46249956
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 46249956
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 46249956
default offset for target address 4
base memory address 46249952
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_host_endpoint**)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 46249568
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46249568
default offset for target address 0
base memory address 46249568
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 46249568
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46249568
default offset for target address 0
base memory address 46249568
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 4 %struct.usb_host_endpoint**))
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %mul, i32* %size, align 4
 address: 46244832
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46244832
default offset for target address 0
base memory address 46244832
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 45585504
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45585504
default offset for target address 0
base memory address 45585504
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 45834240
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 45834240
default offset for target address 0
base memory address 45834240
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 45585504
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45585504
default offset for target address 0
base memory address 45585504
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 45834240
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 45834240
default offset for target address 0
base memory address 45834240
bounds check expression true
in bounds? 1
 load result: 20971712
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 46252688
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46252688
default offset for target address 0
base memory address 46252688
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 46250512
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46250512
default offset for target address 0
base memory address 46250512
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 46252688
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46252688
default offset for target address 0
base memory address 46252688
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load i32, i32* %flags.addr, align 4KLEE: WARNING ONCE: Alignment of memory from call "__kmalloc" is not modelled. Using alignment of 8.

 address: 46250512
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46250512
default offset for target address 0
base memory address 46250512
bounds check expression true
in bounds? 1
 load result: 21004480
main thread es->rtid=-1
Number of states=1
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 46245392
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245392
default offset for target address 0
base memory address 46245392
bounds check expression true
in bounds? 1
 load result: 46236544
main thread es->rtid=-1
Number of states=1
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 46257888
geptr final base: 46257888
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 46257888
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46257888
default offset for target address 0
base memory address 46257888
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46248256
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46248256
default offset for target address 0
base memory address 46248256
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46248256
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46248256
default offset for target address 0
base memory address 46248256
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 46236496
geptr offset: 48
geptr base: 46236544
geptr final base: 46236544
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 46236544
geptr final base: 46236544
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 46236544
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46236544
default offset for target address 48
base memory address 46236496
bounds check expression true
in bounds? 1
Is %struct.device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 48 arg_0)
Allocating memory for type %struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 } of size 
allocation size: 728
lazy initializing writing 46261168 to 46236544
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8
 address: 46236544
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46236544
default offset for target address 48
base memory address 46236496
(forced) offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 46261168
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 46253504
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46253504
default offset for target address 0
base memory address 46253504
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8
 address: 46253504
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46253504
default offset for target address 0
base memory address 46253504
bounds check expression true
in bounds? 1
 load result: 46261168
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: 46261168
geptr offset: 18446744073709551464
geptr base: 46261016
geptr final base: 46261016
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 46249568
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46249568
default offset for target address 0
base memory address 46249568
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmpKLEE: WARNING ONCE: calling external: usb_get_dev(46261016) at [no debug info]

 address: 46249568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46249568
default offset for target address 0
base memory address 46249568
bounds check expression true
in bounds? 1
 load result: 46261016
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
return type of external function: %struct.usb_device*
allocation size: 8
memory operation
  %call19 = call %struct.usb_device* @usb_get_dev(%struct.usb_device* %call18) #10
 address: 46252688
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46252688
default offset for target address 0
base memory address 46252688
bounds check expression true
in bounds? 1
 load result: (ReadLSB w64 0 67)
main thread es->rtid=-1
Number of states=1
memory operation
  %17 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %udev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %17, i32 0, i32 1
 initial base: 46257888
geptr offset: 8
geptr base: 46257896
geptr final base: 46257896
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_device* %call19, %struct.usb_device** %udev, align 8
 address: 46257896
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46257896
default offset for target address 8
base memory address 46257888
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %18 = load i32, i32* %size, align 4  %18 = load i32, i32* %size, align 4

 address: 46244832
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46244832
default offset for target address 0
base memory address 46244832
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (Mul w32 (And w32 (And w32 N0:(ZExt w32 (ReadLSB w16 4 %struct.usb_host_endpoint**))
                            2047)
                   2047)
          (Add w32 1
                   (AShr w32 (And w32 N0 6144) 11)))
main thread es->rtid=-1
Number of states=1
memory operation
  %19 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %iso_size = getelementptr inbounds %struct.usbtv, %struct.usbtv* %19, i32 0, i32 17
 initial base: 46257888
geptr offset: 2340
geptr base: 46260228
geptr final base: 46260228
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %18, i32* %iso_size, align 4
 address: 46260228
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46260228
default offset for target address 2340
base memory address 46257888
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %20 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=1
memory operation
  %21 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46250880
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46250880
default offset for target address 0
base memory address 46250880
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 46265664
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46265664
default offset for target address 0
base memory address 46265664
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46250880
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46250880
default offset for target address 0
base memory address 46250880
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 46236496
geptr offset: 48
geptr base: 46236544
geptr final base: 46236544
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 46265664
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46265664
default offset for target address 0
base memory address 46265664
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 46265632
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46265632
default offset for target address 0
base memory address 46265632
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 46270752
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46270752
default offset for target address 0
base memory address 46270752
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 46270752
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46270752
default offset for target address 0
base memory address 46270752
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 46265632
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46265632
default offset for target address 0
base memory address 46265632
bounds check expression true
in bounds? 1
 load result: 46236544
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 46236544
geptr offset: 152
geptr base: 46236696
geptr final base: 46236696
main thread es->rtid=-1
Number of states=1
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 46236696
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46236696
default offset for target address 200
base memory address 46236496
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %23 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8KLEE: WARNING ONCE: calling external: usbtv_video_init(46257888) at [no debug info]

 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
return type of external function: i32
allocation size: 4
memory operation
  %call20 = call i32 @usbtv_video_init(%struct.usbtv* %23) #10
 address: 46253904
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46253904
default offset for target address 0
base memory address 46253904
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %call20, i32* %ret, align 4
 address: 46244000
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46244000
default offset for target address 0
base memory address 46244000
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %24 = load i32, i32* %ret, align 4  %24 = load i32, i32* %ret, align 4

 address: 46244000
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46244000
default offset for target address 0
base memory address 46244000
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=2
memory operation
  %34 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 45833440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 45833440
default offset for target address 0
base memory address 45833440
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %25 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8KLEE: WARNING ONCE: calling external: usbtv_audio_init(46257888) at [no debug info]

 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=2
return type of external function: i32
allocation size: 4
memory operation
  %call25 = call i32 @usbtv_audio_init(%struct.usbtv* %25) #10
 address: 46300720
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46300720
default offset for target address 0
base memory address 46300720
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=2
memory operation
  store i32 %call25, i32* %ret, align 4
 address: 46244000
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46244000
default offset for target address 0
base memory address 46244000
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %26 = load i32, i32* %ret, align 4  %26 = load i32, i32* %ret, align 4

 address: 46244000
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46244000
default offset for target address 0
base memory address 46244000
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 46244576
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46244576
default offset for target address 0
base memory address 46244576
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %29 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46243568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46243568
default offset for target address 0
base memory address 46243568
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=3
memory operation
  %27 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 45833440
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 45833440
default offset for target address 0
base memory address 45833440
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 46236496
geptr offset: 48
geptr base: 46236544
geptr final base: 46236544
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 46244576
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46244576
default offset for target address 0
base memory address 46244576
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 46304496
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46304496
default offset for target address 0
base memory address 46304496
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %v4l2_dev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %27, i32 0, i32 2
 initial base: 46257888
geptr offset: 16
geptr base: 46257904
geptr final base: 46257904
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 46301472
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46301472
default offset for target address 0
base memory address 46301472
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 46304496
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46304496
default offset for target address 0
base memory address 46304496
bounds check expression true
in bounds? 1
 load result: 46236496
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 46236496
geptr offset: 48
geptr base: 46236544
geptr final base: 46236544
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.v4l2_device* %v4l2_dev, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 46273440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46273440
default offset for target address 0
base memory address 46273440
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load %struct.v4l2_device*, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 46273440
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46273440
default offset for target address 0
base memory address 46273440
bounds check expression true
in bounds? 1
 load result: 46257904
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %ref = getelementptr inbounds %struct.v4l2_device, %struct.v4l2_device* %0, i32 0, i32 8
 initial base: 46257904
geptr offset: 104
geptr base: 46258008
geptr final base: 46258008
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 46315824
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46315824
default offset for target address 0
base memory address 46315824
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 46301472
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46301472
default offset for target address 0
base memory address 46301472
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.kref* %kref, %struct.kref** %kref.addr, align 8
 address: 46273104
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46273104
default offset for target address 0
base memory address 46273104
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 46307888
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46307888
default offset for target address 0
base memory address 46307888
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load %struct.kref*, %struct.kref** %kref.addr, align 8
 address: 46273104
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46273104
default offset for target address 0
base memory address 46273104
bounds check expression true
in bounds? 1
 load result: 46258008
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 46307888
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46307888
default offset for target address 0
base memory address 46307888
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %refcount = getelementptr inbounds %struct.kref, %struct.kref* %0, i32 0, i32 0
 initial base: 46258008
geptr final base: 46258008
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 46315824
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46315824
default offset for target address 0
base memory address 46315824
bounds check expression true
in bounds? 1
 load result: 46236544
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9KLEE: WARNING ONCE: calling external: refcount_inc(46258008) at [no debug info]

 initial base: 46236544
geptr offset: 152
geptr base: 46236696
geptr final base: 46236696
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 46236696
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46236696
default offset for target address 200
base memory address 46236496
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  %28 = load %struct.device*, %struct.device** %dev, align 8
 address: 46245392
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245392
default offset for target address 0
base memory address 46245392
bounds check expression true
in bounds? 1
 load result: 46236544
main thread es->rtid=-1
Number of states=3
memory operation
  %35 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %udev31 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %35, i32 0, i32 1KLEE: WARNING ONCE: calling external: _dev_info(46236544, 46211616) at [no debug info]

 initial base: 46257888
geptr offset: 8
geptr base: 46257896
geptr final base: 46257896
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8

 address: 46257896
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46257896
default offset for target address 8
base memory address 46257888
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
Allocating memory for type %struct.usb_device = type { i32, [16 x i8], i32, i32, i32, %struct.usb_tt*, i32, [2 x i32], %struct.usb_device*, %struct.usb_bus*, %struct.usb_host_endpoint, %struct.device, %struct.usb_device_descriptor, %struct.usb_host_bos*, %struct.usb_host_config*, %struct.usb_host_config*, [16 x %struct.usb_host_endpoint*], [16 x %struct.usb_host_endpoint*], i8**, i16, i8, i8, i16, i32, i8*, i8*, i8*, %struct.list_head, i32, i32, %struct.atomic_t, i64, i64, i8, %struct.wusb_dev*, i32, i32, %struct.usb2_lpm_parameters, %struct.usb3_lpm_parameters, %struct.usb3_lpm_parameters, i32 } of size 
allocation size: 1352
lazy initializing writing 46321632 to 46257896
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8KLEE: WARNING ONCE: calling external: usb_put_dev(46321632) at [no debug info]

 address: 46257896
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46257896
default offset for target address 8
base memory address 46257888
(forced) offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 46321632
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  %37 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=3
memory operation
  store i32 0, i32* %retval
 address: 46242816
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
Executing free..
Resolving exact for free!Resolved exact for free!main thread es->rtid=-1
Number of states=3
memory operation
  %40 = load i32, i32* %retval
 address: 46242816
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=3
memory operation
  %39 = load i32, i32* %ret, align 4  %39 = load i32, i32* %ret, align 4

Path constraint:
array %struct.usb_host_interface**[80] : w32 -> w8 = symbolic
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq 4 (Read w8 44 %struct.usb_host_interface**))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Eq false
             (Slt (ReadLSB w32 0 86)
                  0))]
        false)

 address: 46244000
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46244000
default offset for target address 0
base memory address 46244000
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=3
Number of states=2
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 46317264
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46317264
default offset for target address 0
base memory address 46317264
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 46253440
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46253440
default offset for target address 0
base memory address 46253440
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  store i32 %39, i32* %retval
 address: 46242816
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 46253440
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46253440
default offset for target address 0
base memory address 46253440
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

 address: 46242816
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=2
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 46317264
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46317264
default offset for target address 0
base memory address 46317264
bounds check expression true
in bounds? 1
 load result: 46236544
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 46236544
geptr offset: 152
geptr base: 46236696
geptr final base: 46236696
main thread es->rtid=-1
Number of states=2
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 46236696
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46236696
default offset for target address 200
base memory address 46236496
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %30 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %udev30 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %30, i32 0, i32 1
 initial base: 46257888
geptr offset: 8
geptr base: 46257896
geptr final base: 46257896
main thread es->rtid=-1
Number of states=2
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8

 address: 46257896
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46257896
default offset for target address 8
base memory address 46257888
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
Allocating memory for type %struct.usb_device = type { i32, [16 x i8], i32, i32, i32, %struct.usb_tt*, i32, [2 x i32], %struct.usb_device*, %struct.usb_bus*, %struct.usb_host_endpoint, %struct.device, %struct.usb_device_descriptor, %struct.usb_host_bos*, %struct.usb_host_config*, %struct.usb_host_config*, [16 x %struct.usb_host_endpoint*], [16 x %struct.usb_host_endpoint*], i8**, i16, i8, i8, i16, i32, i8*, i8*, i8*, %struct.list_head, i32, i32, %struct.atomic_t, i64, i64, i8, %struct.wusb_dev*, i32, i32, %struct.usb2_lpm_parameters, %struct.usb3_lpm_parameters, %struct.usb3_lpm_parameters, i32 } of size 
allocation size: 1352
lazy initializing writing 46308784 to 46257896
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8
Path constraint:
array %struct.usb_host_interface**[80] : w32 -> w8 = symbolic
array 80[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq 4 (Read w8 44 %struct.usb_host_interface**))
         (Slt (ReadLSB w32 0 80)
              0)]
        false)

 address: 46257896
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 46257896
default offset for target address 8
base memory address 46257888
(forced) offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 46308784
main thread es->rtid=-1
Number of states=2
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %32 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8KLEE: WARNING ONCE: calling external: usbtv_video_free(46257888) at [no debug info]

 address: 46245776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 46245776
default offset for target address 0
base memory address 46245776
bounds check expression true
in bounds? 1
 load result: 46257888
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %33 = load i32, i32* %ret, align 4  %33 = load i32, i32* %ret, align 4

 address: 46244000
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46244000
default offset for target address 0
base memory address 46244000
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %33, i32* %retval
 address: 46242816
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

Path constraint:
array %struct.usb_host_interface**[80] : w32 -> w8 = symbolic
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq 4 (Read w8 44 %struct.usb_host_interface**))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Slt (ReadLSB w32 0 86)
              0)]
        false)

KLEE: done: total instructions = 252
KLEE: done: completed paths = 5
KLEE: done: generated tests = 5

 address: 46242816
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 46242816
default offset for target address 0
base memory address 46242816
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=1
