KLEE: output directory is "/home/tuba/Documents/tools/klee-3.8/temp/klee-out-3"
KLEE: Using STP solver backend
KLEE: WARNING: undefined reference to function: __kmalloc
KLEE: WARNING: undefined reference to function: _dev_info
KLEE: WARNING: undefined reference to function: kfree
KLEE: WARNING: undefined reference to function: refcount_inc
KLEE: WARNING: undefined reference to function: usb_control_msg
KLEE: WARNING: undefined reference to function: usb_deregister
KLEE: WARNING: undefined reference to function: usb_get_dev
KLEE: WARNING: undefined reference to function: usb_put_dev
KLEE: WARNING: undefined reference to function: usb_register_driver
KLEE: WARNING: undefined reference to function: usbtv_audio_free
KLEE: WARNING: undefined reference to function: usbtv_audio_init
KLEE: WARNING: undefined reference to function: usbtv_video_free
KLEE: WARNING: undefined reference to function: usbtv_video_init
KLEE: WARNING: undefined reference to function: v4l2_device_put
arg 0 type %struct.usb_interface*
allocation size: 824
binding arg 0 of type %struct.usb_interface* to address 50400144
arg 1 type %struct.usb_device_id*
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
Alloc'ing...
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.usb_device_id* %id, %struct.usb_device_id** %id.addr, align 8
 address: 50407280
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50407280
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %dev1 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=1
memory operation
  store %struct.device* %dev1, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
memory operation
  %1 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %num_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %1, i32 0, i32 2
 initial base: 50400144
geptr offset: 16
geptr base: 50400160
geptr final base: 50400160
main thread es->rtid=-1
Number of states=1
memory operation
  %2 = load i32, i32* %num_altsetting, align 4  %2 = load i32, i32* %num_altsetting, align 4
Framework dts:
data type=struct.usb_interface num inst=1
data type=struct.usbtv num inst=1
data type=struct.usb_device_id num inst=1
data type=struct usb_host_endpoint num inst=1
data type=i8 num inst=10
data type=struct.device num inst=1
data type=struct.usb_device num inst=1
data type=struct.v4l2_device num inst=1
data type=struct.v4l2_ctrl_handler num inst=1
data type=struct.video_device num inst=1
data type=struct.vb2_queue num inst=1
data type=struct.snd_card num inst=1
data type=struct.snd_pcm_substream num inst=1
data type=struct.urb num inst=1
data type=struct.usbtv_buf num inst=1
data type=struct.usb_endpoint_descriptor num inst=1

 address: 50400160
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50400160
default offset for target address 16
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 16 arg_0)
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=2
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %3 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=2
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 2
                 (ReadLSB w32 16 arg_0)))]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=2
Number of states=1
GetElementPtr info:
  %altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %3, i32 0, i32 0
 initial base: 50400144
geptr final base: 50400144
main thread es->rtid=-1
Number of states=1
memory operation
  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8

 address: 50400144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400144
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface** (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %arrayidx = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %4, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=1
GetElementPtr info:
  %bNumEndpoints = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 4
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 4
geptr base: (Add w64 44
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 44
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=1
memory operation
  %5 = load i8, i8* %bNumEndpoints, align 1
 address: (Add w64 44
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 8
bytes for the memop: 1
address for memop (Add w64 44
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446744073659925996
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446744073659925996
               (ReadLSB w64 0 arg_0))
      336)
in bounds? 0
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659925996
                                  (ReadLSB w64 0 arg_0)))
          const_arr1)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659922844
                                  (ReadLSB w64 0 arg_0)))
          const_arr2)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659922412
                                  (ReadLSB w64 0 arg_0)))
          const_arr3)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659922076
                                  (ReadLSB w64 0 arg_0)))
          const_arr4)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659866524
                                  (ReadLSB w64 0 arg_0)))
          const_arr5)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659866476
                                  (ReadLSB w64 0 arg_0)))
          const_arr6)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659864540
                                  (ReadLSB w64 0 arg_0)))
          const_arr7)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659802572
                                  (ReadLSB w64 0 arg_0)))
          const_arr8)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659802524
                                  (ReadLSB w64 0 arg_0)))
          const_arr9)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659801500
                                  (ReadLSB w64 0 arg_0)))
          const_arr10)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659786780
                                  (ReadLSB w64 0 arg_0)))
          const_arr11)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659785948
                                  (ReadLSB w64 0 arg_0)))
          const_arr12)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659785452
                                  (ReadLSB w64 0 arg_0)))
          const_arr13)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659784956
                                  (ReadLSB w64 0 arg_0)))
          const_arr14)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659784508
                                  (ReadLSB w64 0 arg_0)))
          const_arr15)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659784124
                                  (ReadLSB w64 0 arg_0)))
          const_arr16)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659782732
                                  (ReadLSB w64 0 arg_0)))
          const_arr17)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659782284
                                  (ReadLSB w64 0 arg_0)))
          const_arr18)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659781292
                                  (ReadLSB w64 0 arg_0)))
          const_arr19)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659780908
                                  (ReadLSB w64 0 arg_0)))
          const_arr20)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659778636
                                  (ReadLSB w64 0 arg_0)))
          const_arr21)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659776332
                                  (ReadLSB w64 0 arg_0)))
          const_arr22)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659776044
                                  (ReadLSB w64 0 arg_0)))
          const_arr23)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659775548
                                  (ReadLSB w64 0 arg_0)))
          const_arr24)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659775500
                                  (ReadLSB w64 0 arg_0)))
          const_arr25)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659774684
                                  (ReadLSB w64 0 arg_0)))
          const_arr26)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659774636
                                  (ReadLSB w64 0 arg_0)))
          const_arr27)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659773676
                                  (ReadLSB w64 0 arg_0)))
          const_arr28)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659773212
                                  (ReadLSB w64 0 arg_0)))
          const_arr29)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659772380
                                  (ReadLSB w64 0 arg_0)))
          const_arr30)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659772332
                                  (ReadLSB w64 0 arg_0)))
          const_arr31)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659680188
                                  (ReadLSB w64 0 arg_0)))
          const_arr32)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659554348
                                  (ReadLSB w64 0 arg_0)))
          const_arr33)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659554012
                                  (ReadLSB w64 0 arg_0)))
          const_arr34)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659553580
                                  (ReadLSB w64 0 arg_0)))
          const_arr35)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659550508
                                  (ReadLSB w64 0 arg_0)))
          const_arr36)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659550108
                                  (ReadLSB w64 0 arg_0)))
          const_arr37)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659549660
                                  (ReadLSB w64 0 arg_0)))
          const_arr38)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659548812
                                  (ReadLSB w64 0 arg_0)))
          const_arr39)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659548764
                                  (ReadLSB w64 0 arg_0)))
          const_arr40)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659184508
                                  (ReadLSB w64 0 arg_0)))
          const_arr41)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659182652
                                  (ReadLSB w64 0 arg_0)))
          const_arr42)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659181276
                                  (ReadLSB w64 0 arg_0)))
          const_arr43)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659180796
                                  (ReadLSB w64 0 arg_0)))
          const_arr44)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659180412
                                  (ReadLSB w64 0 arg_0)))
          const_arr45)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659180060
                                  (ReadLSB w64 0 arg_0)))
          const_arr46)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659178812
                                  (ReadLSB w64 0 arg_0)))
          const_arr47)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659178300
                                  (ReadLSB w64 0 arg_0)))
          const_arr48)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659177692
                                  (ReadLSB w64 0 arg_0)))
          const_arr49)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659177004
                                  (ReadLSB w64 0 arg_0)))
          const_arr50)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659176396
                                  (ReadLSB w64 0 arg_0)))
          const_arr51)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659175884
                                  (ReadLSB w64 0 arg_0)))
          const_arr52)
 load result: (Read w8 (Extract w32 KLEE: ERROR: (location information missing) memory error: out of bound pointer
KLEE: NOTE: now ignoring this error at this location

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734181676 N0) 768))
         (Eq false
             (Ult (Add w64 18446603689689311500 N0) 4))
         (Eq false
             (Ult (Add w64 18446603689689311484 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689689311468 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689689311452 N0) 8))]
        false)
0 (Add w64 18446744073659175324
                                  (ReadLSB w64 0 arg_0)))
          const_arr53)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659174764
                                  (ReadLSB w64 0 arg_0)))
          const_arr54)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659174204
                                  (ReadLSB w64 0 arg_0)))
          const_arr55)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659173548
                                  (ReadLSB w64 0 arg_0)))
          const_arr56)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659172988
                                  (ReadLSB w64 0 arg_0)))
          const_arr57)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659151516
                                  (ReadLSB w64 0 arg_0)))
          arg_0)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659145100
                                  (ReadLSB w64 0 arg_0)))
          const_arr58)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659144380
                                  (ReadLSB w64 0 arg_0)))
          const_arr59)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659144348
                                  (ReadLSB w64 0 arg_0)))
          const_arr60)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659143916
                                  (ReadLSB w64 0 arg_0)))
          const_arr61)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659143084
                                  (ReadLSB w64 0 arg_0)))
          const_arr62)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659142524
                                  (ReadLSB w64 0 arg_0)))
          const_arr63)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659142140
                                  (ReadLSB w64 0 arg_0)))
          const_arr64)
 load result: (Read w8 (Extract w32 0 (Add w64 18446744073659141708
                                  (ReadLSB w64 0 arg_0)))
          const_arr65)
 load result: (Read w8 (Extract w32 0 (Add w64 18446603689734185772
                                  (ReadLSB w64 0 arg_0)))
          const_arr66)
 load result: (Read w8 (Extract w32 0 (Add w64 18446603689734184236
                                  (ReadLSB w64 0 arg_0)))
          const_arr67)
 load result: (Read w8 (Extract w32 0 (Add w64 18446603689734181676
                                  (ReadLSB w64 0 arg_0)))
          const_arr68)
 load result: (Read w8 (Extract w32 0 (Add w64 18446603689689311500
                                  (ReadLSB w64 0 arg_0)))
          const_arr69)
 load result: (Read w8 (Extract w32 0 (Add w64 18446603689689311484
                                  (ReadLSB w64 0 arg_0)))
          const_arr70)
 load result: (Read w8 (Extract w32 0 (Add w64 18446603689689311468
                                  (ReadLSB w64 0 arg_0)))
          const_arr71)
 load result: (Read w8 (Extract w32 0 (Add w64 18446603689689311452
                                  (ReadLSB w64 0 arg_0)))
          const_arr72)
Info: 
	address: (Add w64 44
          (ReadLSB w64 0 arg_0))
	example: 44
	range: [0, 18446744073709551615]
	next: object at 49625664 of size 336
		MO0[336] allocated at usbtv_probe():  %retval = alloca i32, align 4

main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Ult (Add w64 18446744073659925996
                       (ReadLSB w64 0 arg_0))
              336)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
main thread es->rtid=-1
Number of states=73
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Ult (Add w64 18446744073659922844 N0) 19)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Ult (Add w64 18446744073659922412 N0) 16)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=72
main thread es->rtid=-1
Number of states=72
Number of states=71
main thread es->rtid=-1
Number of states=71
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Ult (Add w64 18446744073659922076 N0) 20)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=70
main thread es->rtid=-1
Number of states=70
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=69
main thread es->rtid=-1
Number of states=69
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=69
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Ult (Add w64 18446744073659866476 N0) 817)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Ult (Add w64 18446744073659866524 N0) 39)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=69
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
main thread es->rtid=-1
Number of states=68
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Ult (Add w64 18446744073659864540 N0) 20)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
main thread es->rtid=-1
Number of states=67
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Ult (Add w64 18446744073659802572 N0) 34)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Ult (Add w64 18446744073659802524 N0) 80)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=66
main thread es->rtid=-1
Number of states=66
Number of states=65
main thread es->rtid=-1
Number of states=65
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Ult (Add w64 18446744073659801500 N0) 41)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=64
main thread es->rtid=-1
Number of states=64
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Ult (Add w64 18446744073659786780 N0) 33)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
main thread es->rtid=-1
Number of states=63
Number of states=62
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Ult (Add w64 18446744073659785948 N0) 45)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=62
main thread es->rtid=-1
Number of states=62
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Ult (Add w64 18446744073659785452 N0) 44)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
main thread es->rtid=-1
Number of states=61
Number of states=60
main thread es->rtid=-1
Number of states=60
main thread es->rtid=-1
Number of states=60
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Ult (Add w64 18446744073659784956 N0) 49)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=60
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=59
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Ult (Add w64 18446744073659784508 N0) 17)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
main thread es->rtid=-1
Number of states=59
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Ult (Add w64 18446744073659784124 N0) 500)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=59
Number of states=58
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Ult (Add w64 18446744073659782732 N0) 50)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
main thread es->rtid=-1
Number of states=58
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=57
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734181676 N0) 768))
         (Eq false
             (Ult (Add w64 18446603689689311500 N0) 4))
         (Ult (Add w64 18446603689689311484 N0) 8)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
main thread es->rtid=-1
Number of states=57
Number of states=56
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Ult (Add w64 18446744073659782284 N0) 325)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
Number of states=55
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=56
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
main thread es->rtid=-1
Number of states=56
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=56
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Ult (Add w64 18446744073659781292 N0) 16)]
        false)

 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=56
Number of states=55
main thread es->rtid=-1
Number of states=55
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Ult (Add w64 18446744073659780908 N0) 8)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=55
main thread es->rtid=-1
Number of states=55
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=54
main thread es->rtid=-1
Number of states=54
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Ult (Add w64 18446744073659776332 N0) 13)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=54
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Ult (Add w64 18446744073659778636 N0) 924)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Ult (Add w64 18446744073659776044 N0) 89)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=53
main thread es->rtid=-1
Number of states=53
Number of states=52
main thread es->rtid=-1
Number of states=52
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
main thread es->rtid=-1
Number of states=51
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=51
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Ult (Add w64 18446744073659775548 N0) 36)]
        false)

 initial base: 50400144
geptr final base: 50400144
main thread es->rtid=-1
Number of states=51
Number of states=50
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
main thread es->rtid=-1
Number of states=50
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Ult (Add w64 18446744073659550108 N0) 49)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=50
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Ult (Add w64 18446744073659775500 N0) 53)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Ult (Add w64 18446744073659774684 N0) 32)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=49
main thread es->rtid=-1
Number of states=49
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Ult (Add w64 18446744073659773676 N0) 31)]
        false)

 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
main thread es->rtid=-1
Number of states=48
Number of states=47
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=47
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=47
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Ult (Add w64 18446744073659774636 N0) 354)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=47
main thread es->rtid=-1
Number of states=47
Number of states=46
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Ult (Add w64 18446744073659772380 N0) 34)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
main thread es->rtid=-1
Number of states=46
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=45
main thread es->rtid=-1
Number of states=45
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=45
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Ult (Add w64 18446744073659773212 N0) 39)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=45
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
main thread es->rtid=-1
Number of states=44
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Ult (Add w64 18446744073659772332 N0) 112)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Ult (Add w64 18446744073659177692 N0) 81)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=44
Number of states=43
Number of states=42
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
main thread es->rtid=-1
Number of states=42
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Ult (Add w64 18446744073659174764 N0) 14)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Ult (Add w64 18446744073659680188 N0) 14)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=42
Number of states=41
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=40
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Ult (Add w64 18446744073659553580 N0) 1313)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=40
main thread es->rtid=-1
Number of states=40
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Ult (Add w64 18446744073659554012 N0) 10)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
Number of states=38
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=39
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Ult (Add w64 18446744073659550508 N0) 43)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=39
main thread es->rtid=-1
Number of states=39
Number of states=38
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

 address: 50400144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400144
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface** (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=38
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=38
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Ult (Add w64 18446744073659554348 N0) 22)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=38
main thread es->rtid=-1
Number of states=38
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Ult (Add w64 18446744073659549660 N0) 267)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Ult (Add w64 18446744073659145100 N0) 4)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
main thread es->rtid=-1
Number of states=37
Number of states=36
Number of states=35
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %6 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=35
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Ult (Add w64 18446744073659548812 N0) 29)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
main thread es->rtid=-1
Number of states=35
Number of states=34
main thread es->rtid=-1
Number of states=34
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=34
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Ult (Add w64 18446744073659548764 N0) 20)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=34
Number of states=33
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Ult (Add w64 18446744073659172988 N0) 5)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=33
main thread es->rtid=-1
Number of states=33
Number of states=32
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=32
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Ult (Add w64 18446744073659184508 N0) 8)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
main thread es->rtid=-1
Number of states=32
Number of states=31
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Ult (Add w64 18446744073659180412 N0) 39)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
main thread es->rtid=-1
Number of states=31
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=30
main thread es->rtid=-1
Number of states=30
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=30
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Ult (Add w64 18446744073659182652 N0) 240)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=30
Number of states=29
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=29
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Ult (Add w64 18446744073659180060 N0) 64)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
main thread es->rtid=-1
Number of states=29
Number of states=28
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=28
main thread es->rtid=-1
Number of states=28
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Ult (Add w64 18446744073659181276 N0) 8)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=28
Number of states=27
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Ult (Add w64 18446744073659178812 N0) 24)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=27
main thread es->rtid=-1
Number of states=27
Number of states=26
memory operation
  store i32 -19, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Ult (Add w64 18446744073659180796 N0) 6)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=26
Number of states=25
main thread es->rtid=-1
Number of states=25
main thread es->rtid=-1
Number of states=25
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=25
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Ult (Add w64 18446744073659141708 N0) 8)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Ult (Add w64 18446744073659178300 N0) 12)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=25
Number of states=24
Number of states=23
main thread es->rtid=-1
Number of states=23
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=23
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=23
main thread es->rtid=-1
Number of states=23
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Ult (Add w64 18446744073659177004 N0) 15)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=23
Number of states=22
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Ult (Add w64 18446744073659176396 N0) 8)]
        false)

 initial base: 50400144
geptr final base: 50400144
main thread es->rtid=-1
Number of states=22
Number of states=21
main thread es->rtid=-1
Number of states=21
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=21
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=21
main thread es->rtid=-1
Number of states=21
main thread es->rtid=-1
Number of states=21
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=21
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=21
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=21
main thread es->rtid=-1
Number of states=21
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=21
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=21
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Ult N1:(Add w64 18446744073659151516 N0) 824)
         (Eq false
             (Eq 4
                 (Read w8 (Extract w32 0 N1)
                          arg_0)))]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Ult (Add w64 18446744073659175884 N0) 8)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=21
Number of states=20
Number of states=19
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Ult (Add w64 18446744073659175324 N0) 16)]
        false)

 address: 50400144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400144
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface** (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=19
Number of states=18
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Ult (Add w64 18446744073659144348 N0) 8)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Ult (Add w64 18446744073659144380 N0) 8)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=18
Number of states=17
main thread es->rtid=-1
Number of states=17
main thread es->rtid=-1
Number of states=17
Number of states=16
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=16
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=16
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Ult (Add w64 18446744073659173548 N0) 14)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=16
main thread es->rtid=-1
Number of states=16
Number of states=15
main thread es->rtid=-1
Number of states=15
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Ult (Add w64 18446744073659142524 N0) 8)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Ult (Add w64 18446744073659174204 N0) 72)]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734181676 N0) 768))
         (Eq false
             (Ult (Add w64 18446603689689311500 N0) 4))
         (Eq false
             (Ult (Add w64 18446603689689311484 N0) 8))
         (Ult (Add w64 18446603689689311468 N0) 8)]
        false)

 initial base: 50400144
geptr final base: 50400144
main thread es->rtid=-1
Number of states=15
Number of states=14
Number of states=13
Number of states=12
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

 address: 50400144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400144
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface** (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=12
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=12
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %altsetting6 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %6, i32 0, i32 0
 initial base: 50400144
geptr final base: 50400144
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=12
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=12
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Ult (Add w64 18446744073659142140 N0) 8)]
        false)

 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=12
Number of states=11
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
main thread es->rtid=-1
Number of states=11
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8KLEE: ERROR: (location information missing) memory error: out of bound pointer
KLEE: NOTE: now ignoring this error at this location

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Ult N1:(Add w64 18446744073659151516 N0) 824)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      arg_0))
         (Eq false
             (Ult (Add w64 18446744073659151536 N0) 817))]
        false)

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446744073659151536
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446744073659151536
               (ReadLSB w64 0 arg_0))
      817)
in bounds? 0
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
Info: 
	address: (Add w64 64
          (ReadLSB w64 0 arg_0))
	example: 50400976
	range: [50400961, 50400987]
	next: object at 50406560 of size 4
		MO65[4] allocated at usbtv_probe():  %retval = alloca i32, align 4
	prev: object at 50400144 of size 824
		MO64[824] allocated at usbtv_probe():  %retval = alloca i32, align 4

main thread es->rtid=-1
Number of states=11
memory operation
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting6, align 8

 address: 50400144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400144
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_interface** (count=0) to be lazy init?
 load result: (ReadLSB w64 0 arg_0)
main thread es->rtid=-1
Number of states=11
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
array const_arr67[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Ult N1:(Add w64 18446603689734184236 N0) 1536)
         (Eq false
             (Eq 4
                 (Read w8 (Extract w32 0 N1)
                          const_arr67)))]
        false)

 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=11
Number of states=10
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Ult (Add w64 18446744073659143916 N0) 4)]
        false)

 address: 50409952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=10
Number of states=9
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=9
memory operation
  store i32 -19, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=9
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=9
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=9
main thread es->rtid=-1
Number of states=9
main thread es->rtid=-1
Number of states=9
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=9
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=9
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=9
main thread es->rtid=-1
Number of states=9
Alloc'ing...
main thread es->rtid=-1
Number of states=9
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 50629616
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50629616
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=9
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
array const_arr66[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Ult N1:(Add w64 18446603689734185772 N0) 1536)
         (Eq false
             (Eq 4
                 (Read w8 (Extract w32 0 N1)
                          const_arr66)))]
        false)

Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Ult (Add w64 18446744073659143084 N0) 4)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=9
Number of states=8
Number of states=7
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 50629616
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50629616
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
allocation size: 8
lazy initializing writing 50011600 to 50629616
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
array const_arr68[768] : w32 -> w8 = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 3 32 2 32 2 32 2 32 2 32 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 1 96 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 4 192 8 216 8 216 8 216 8 216 8 216 8 216 8 216 8 216 8 216 8 216 4 192 4 192 4 192 4 192 4 192 4 192 4 192 8 213 8 213 8 213 8 213 8 213 8 213 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 8 197 4 192 4 192 4 192 4 192 4 192 4 192 8 214 8 214 8 214 8 214 8 214 8 214 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 8 198 4 192 4 192 4 192 4 192 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Ult N1:(Add w64 18446603689734181676 N0) 768)
         (Eq false
             (Eq 4
                 (Read w8 (Extract w32 0 N1)
                          const_arr68)))]
        false)

 address: 50629616
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50629616
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 50011600
main thread es->rtid=-1
Number of states=7
Number of states=6
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 4294967277
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734181676 N0) 768))
         (Eq false
             (Ult (Add w64 18446603689689311500 N0) 4))
         (Eq false
             (Ult (Add w64 18446603689689311484 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689689311468 N0) 8))
         (Ult (Add w64 18446603689689311452 N0) 8)]
        false)

 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=6
Number of states=5
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 50011600
geptr offset: 4
geptr base: 50011604
geptr final base: 50011604
main thread es->rtid=-1
Number of states=5
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446603689734185792
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446603689734185792
               (ReadLSB w64 0 arg_0))
      1529)
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 50011604
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 50011604
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**)
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %arrayidx7 = getelementptr %struct.usb_host_interface, %struct.usb_host_interface* %7, i64 1
 initial base: (ReadLSB w64 0 arg_0)
geptr offset: 40
geptr base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 40
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx7, i32 0, i32 3
 initial base: (Add w64 40
          (ReadLSB w64 0 arg_0))
geptr offset: 24
geptr base: (Add w64 64
          (ReadLSB w64 0 arg_0))
geptr final base: (Add w64 64
          (ReadLSB w64 0 arg_0))
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 50409952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
Path constraint:
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734181676 N0) 768))
         (Ult (Add w64 18446603689689311500 N0) 4)]
        false)

 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=5
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446603689734184256
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446603689734184256
               (ReadLSB w64 0 arg_0))
      1529)
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=4
memory operation
  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8  %8 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8

 address: (Add w64 64
          (ReadLSB w64 0 arg_0))
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop (Add w64 64
          (ReadLSB w64 0 arg_0))
default offset for target address (Add w64 18446603689734181696
          (ReadLSB w64 0 arg_0))
bounds check expression (Ult (Add w64 18446603689734181696
               (ReadLSB w64 0 arg_0))
      761)
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %arrayidx8 = getelementptr %struct.usb_host_endpoint, %struct.usb_host_endpoint* %8, i64 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 50409952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 50805744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50805744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 50805744
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50805744
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
allocation size: 8
lazy initializing writing 50802672 to 50805744
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 50805744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50805744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 50802672
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 50802672
geptr offset: 4
geptr base: 50802676
geptr final base: 50802676
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %call, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
          2047)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_host_endpoint* %arrayidx8, %struct.usb_host_endpoint** %ep, align 8
 address: 50409952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 50802676
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 50802676
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**)
main thread es->rtid=-1
Number of states=4
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 53144768
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53144768
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %desc9 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %call, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 53144768
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53144768
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
allocation size: 8
lazy initializing writing 52320512 to 53144768
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 53144768
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53144768
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 52320512
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 52320512
geptr offset: 4
geptr base: 52320516
geptr final base: 52320516
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 50413968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50413968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
          2047)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 50413968
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50413968
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446744073659151536
                                         (ReadLSB w64 0 arg_0))) arg_0)
allocation size: 8
lazy initializing writing 51151072 to 50413968
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 50413968
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50413968
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 51151072
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 51151072
geptr offset: 4
geptr base: 51151076
geptr final base: 51151076
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 51493744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51493744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 51151076
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 51151076
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1)
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 52320516
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 52320516
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 49627856
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 49627856
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 49627856
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 49627856
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 52320224
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52320224
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 51493744
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51493744
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
allocation size: 8
lazy initializing writing 50425744 to 51493744
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 51493744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51493744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 50425744
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 50425744
geptr offset: 4
geptr base: 50425748
geptr final base: 50425748
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 52320224
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52320224
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734185792
                                         (ReadLSB w64 0 arg_0))) const_arr66)
allocation size: 8
lazy initializing writing 51664816 to 52320224
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 52320224
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52320224
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 51664816
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 51664816
geptr offset: 4
geptr base: 51664820
geptr final base: 51664820
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %call, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
          2047)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 51664820
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 51664820
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 50425748
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 50425748
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 50740240
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50740240
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %mul, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 50740240
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50740240
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 52332864
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52332864
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 51574912
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 51574912
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 52332864
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52332864
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 51856096
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51856096
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 51574912
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 51574912
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 20971712
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %call, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %10 = load i32, i32* %size, align 4  %10 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
          2047)
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 51856096
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51856096
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734184256
                                         (ReadLSB w64 0 arg_0))) const_arr67)
allocation size: 8
lazy initializing writing 52301664 to 51856096
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 51856096
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51856096
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 52301664
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 52301664
geptr offset: 4
geptr base: 52301668
geptr final base: 52301668
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 51849744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51849744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 52781120
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 52781120
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 51849744
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51849744
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i32, i32* %flags.addr, align 4KLEE: WARNING ONCE: Alignment of memory from call "__kmalloc" is not modelled. Using alignment of 8.

 address: 52781120
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 52781120
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 21004480
main thread es->rtid=-1
Number of states=4
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8  %11 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %ep, align 8

 address: 50409952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409952
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_host_endpoint** (count=0) to be lazy init?
 load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %desc10 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %11, i32 0, i32 0
 initial base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
geptr final base: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 52301668
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 52301668
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 50733888
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50733888
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8

 address: 50733888
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50733888
default offset for target address 0
bounds check expression true
in bounds? 1
Is %struct.usb_endpoint_descriptor** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 N0:(Extract w32 0 (Add w64 18446603689734181696
                                         (ReadLSB w64 0 arg_0))) const_arr68)
allocation size: 8
lazy initializing writing 51047520 to 50733888
memory operation
  %0 = load %struct.usb_endpoint_descriptor*, %struct.usb_endpoint_descriptor** %epd.addr, align 8
 address: 50733888
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50733888
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
 load result: 51047520
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %mul, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 53971952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53971952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 52629136
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 52629136
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
 initial base: 51047520
geptr offset: 4
geptr base: 51047524
geptr final base: 51047524
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 53971952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53971952
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 51272160
geptr final base: 51272160
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 51272160
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51272160
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 52093856
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 52093856
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i16, i16* %wMaxPacketSize, align 1  %1 = load i16, i16* %wMaxPacketSize, align 1

 address: 51047524
executeMemoryOperation isWrite? 0
width for the memop: 16
bytes for the memop: 2
address for memop 51047524
default offset for target address 4
bounds check expression true
in bounds? 1
Is i16* (count=0) to be lazy init?
 load result: (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 52629136
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 52629136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 20971712
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %conv, i32* %maxp, align 4
 address: 51039984
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 51039984
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 52321008
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52321008
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 52321008
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52321008
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 52093856
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 52093856
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 50400192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 48 arg_0)
allocation size: 8
lazy initializing writing 52337792 to 50400192
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8
 address: 50400192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
just wrote:
 load result: 52337792
main thread es->rtid=-1
Number of states=4
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 50801952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50801952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load i32, i32* %maxp, align 4  %2 = load i32, i32* %maxp, align 4

 address: 51039984
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 51039984
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 51551744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51551744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 51418976
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 51418976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8
 address: 51551744
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51551744
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 52337792
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: 52337792
geptr offset: 18446744073709551464
geptr base: 52337640
geptr final base: 52337640
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 50801952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50801952
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 53739248
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53739248
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 51418976
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 51418976
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 21004480
main thread es->rtid=-1
Number of states=4
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmpKLEE: WARNING ONCE: calling external: usb_get_dev(52337640) at [no debug info]

 address: 53739248
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53739248
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 52337640
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
return type of external function: %struct.usb_device*
allocation size: 8
memory operation
  %call19 = call %struct.usb_device* @usb_get_dev(%struct.usb_device* %call18) #10
 address: 51325168
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51325168
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w64 0 67)
main thread es->rtid=-1
Number of states=4
memory operation
  %17 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %udev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %17, i32 0, i32 1
 initial base: 51272160
geptr offset: 8
geptr base: 51272168
geptr final base: 51272168
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_device* %call19, %struct.usb_device** %udev, align 8
 address: 51272168
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51272168
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %18 = load i32, i32* %size, align 4  %18 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (Mul w32 (And w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
                            2047)
                   2047)
          (Add w32 1
                   (AShr w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
                                      6144)
                             11)))
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %19 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %iso_size = getelementptr inbounds %struct.usbtv, %struct.usbtv* %19, i32 0, i32 17
 initial base: 51272160
geptr offset: 2340
geptr base: 51274500
geptr final base: 51274500
main thread es->rtid=-1
Number of states=4
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %18, i32* %iso_size, align 4
 address: 51274500
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 51274500
default offset for target address 2340
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %20 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
memory operation
  %21 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %mul, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 53934944
geptr final base: 53934944
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 53934944
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53934944
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 50427760
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50427760
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50799568
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50799568
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50427760
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50427760
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 50799568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50799568
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 52149904
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52149904
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %mul, i32* %size, align 4
 address: 50408576
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 54051728
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54051728
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 54051728
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54051728
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 50507392
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50507392
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50939840
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50939840
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 53954912
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 53954912
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 50939840
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50939840
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 52149904
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52149904
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 50400192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 48 arg_0)
allocation size: 8
lazy initializing writing 51065232 to 50400192
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8
 address: 50400192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
just wrote:
 load result: 51065232
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 51136800
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51136800
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 50507392
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50507392
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8
 address: 51136800
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51136800
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51065232
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 53954912
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 53954912
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 20971712
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: 51065232
geptr offset: 18446744073709551464
geptr base: 51065080
geptr final base: 51065080
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 51804752
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51804752
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp
 address: 51804752
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51804752
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51065080
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
return type of external function: %struct.usb_device*
allocation size: 8
memory operation
  %call19 = call %struct.usb_device* @usb_get_dev(%struct.usb_device* %call18) #10
 address: 50844304
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50844304
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w64 0 67)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
memory operation
  %23 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=4
memory operation
  %17 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8KLEE: WARNING ONCE: calling external: usbtv_video_init(51272160) at [no debug info]

 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=4
return type of external function: i32
allocation size: 4
memory operation
  %call20 = call i32 @usbtv_video_init(%struct.usbtv* %23) #10
 address: 51372320
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 51372320
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %call20, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %24 = load i32, i32* %ret, align 4  %24 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %udev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %17, i32 0, i32 1
 initial base: 53934944
geptr offset: 8
geptr base: 53934952
geptr final base: 53934952
main thread es->rtid=-1
Number of states=5
memory operation
  %25 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8KLEE: WARNING ONCE: calling external: usbtv_audio_init(51272160) at [no debug info]

 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
return type of external function: i32
allocation size: 4
memory operation
  %call25 = call i32 @usbtv_audio_init(%struct.usbtv* %25) #10
 address: 52729472
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 52729472
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usb_device* %call19, %struct.usb_device** %udev, align 8
 address: 53934952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53934952
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %18 = load i32, i32* %size, align 4  %18 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (Mul w32 (And w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
                            2047)
                   2047)
          (Add w32 1
                   (AShr w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
                                      6144)
                             11)))
main thread es->rtid=-1
Number of states=5
memory operation
  %34 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=5
memory operation
  store i32 %call25, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 50419312
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50419312
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %19 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=5
memory operation
  %26 = load i32, i32* %ret, align 4  %26 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=5
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 53683376
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 53683376
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 50419312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50419312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %iso_size = getelementptr inbounds %struct.usbtv, %struct.usbtv* %19, i32 0, i32 17
 initial base: 53934944
geptr offset: 2340
geptr base: 53937284
geptr final base: 53937284
main thread es->rtid=-1
Number of states=5
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 53187344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53187344
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 53683376
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 53683376
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 20971712
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  store i32 %18, i32* %iso_size, align 4
 address: 53937284
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 53937284
default offset for target address 2340
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %20 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=5
memory operation
  %21 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 53954352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53954352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 52080704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52080704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=6
memory operation
  %29 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
memory operation
  %27 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 53954352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53954352
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %v4l2_dev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %27, i32 0, i32 2
 initial base: 51272160
geptr offset: 16
geptr base: 51272176
geptr final base: 51272176
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 53702304
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 53702304
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 53187344
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53187344
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 53702304
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 53702304
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 21004480
main thread es->rtid=-1
Number of states=6
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 53973552
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53973552
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 54021808
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54021808
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 53973552
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53973552
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store i64 %size, i64* %size.addr, align 8
 address: 50507392
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50507392
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 52080704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52080704
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.v4l2_device* %v4l2_dev, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 51864976
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51864976
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.v4l2_device*, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 51864976
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51864976
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272176
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %ref = getelementptr inbounds %struct.v4l2_device, %struct.v4l2_device* %0, i32 0, i32 8
 initial base: 51272176
geptr offset: 104
geptr base: 51272280
geptr final base: 51272280
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 54021808
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54021808
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 52301088
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52301088
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 53185712
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53185712
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.kref* %kref, %struct.kref** %kref.addr, align 8
 address: 52719776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52719776
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 52093856
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52093856
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 %flags, i32* %flags.addr, align 4
 address: 54133184
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 54133184
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 52301088
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52301088
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 53255312
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53255312
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50994304
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50994304
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load i64, i64* %size.addr, align 8
 address: 50507392
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50507392
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 2560
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51574912
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51574912
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 53185712
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53185712
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 50994304
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50994304
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 54039792
geptr final base: 54039792
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load i32, i32* %flags.addr, align 4
 address: 54133184
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 54133184
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 21004480
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.kref*, %struct.kref** %kref.addr, align 8
 address: 52719776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52719776
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272280
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 54039792
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54039792
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 52093856
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52093856
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %refcount = getelementptr inbounds %struct.kref, %struct.kref* %0, i32 0, i32 0
 initial base: 51272280
geptr final base: 51272280
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
argument to malloc: 2560
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load i8*, i8** %data.addr, align 8KLEE: WARNING ONCE: calling external: refcount_inc(51272280) at [no debug info]

 address: 51574912
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51574912
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 53255312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53255312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %28 = load %struct.device*, %struct.device** %dev, align 8KLEE: WARNING ONCE: calling external: _dev_info(50400192, 50371248) at [no debug info]

 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 0, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %23 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 52386960
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52386960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %35 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %udev31 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %35, i32 0, i32 1
 initial base: 51272160
geptr offset: 8
geptr base: 51272168
geptr final base: 51272168
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
return type of external function: i32
allocation size: 4
memory operation
  %call20 = call i32 @usbtv_video_init(%struct.usbtv* %23) #10
 address: 53239280
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 53239280
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8

 address: 51272168
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51272168
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 51493744 to 51272168
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8
 address: 51272168
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51272168
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 51493744
main thread es->rtid=-1
Number of states=6
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8KLEE: WARNING ONCE: calling external: usb_put_dev(51493744) at [no debug info]

 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %37 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 %call20, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Ult N1:(Add w64 18446744073659151516 N0) 824)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      arg_0))
         (Ult (Add w64 18446744073659151536 N0) 817)
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Eq false
             (Slt (ReadLSB w32 0 86)
                  0))]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=6
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50753152
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50753152
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %24 = load i32, i32* %ret, align 4  %24 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usbtv* %12, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %13 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 50753152
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50753152
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
Executing free..
Resolving exact for free!Resolved exact for free!main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 52386960
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52386960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=6
memory operation
  %34 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %39 = load i32, i32* %ret, align 4  %39 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 %39, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 51597648
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51597648
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %25 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 51553472
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51553472
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 51597648
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51597648
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=6
return type of external function: i32
allocation size: 4
memory operation
  %call25 = call i32 @usbtv_audio_init(%struct.usbtv* %25) #10
 address: 51645088
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 51645088
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50629616
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50629616
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 %call25, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=6
memory operation
  %26 = load i32, i32* %ret, align 4  %26 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %30 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %udev30 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %30, i32 0, i32 1
 initial base: 51272160
geptr offset: 8
geptr base: 51272168
geptr final base: 51272168
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=7
memory operation
  %27 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=7
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 51553472
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51553472
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=7
memory operation
  %29 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 50400192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 48 arg_0)
allocation size: 8
lazy initializing writing 52080128 to 50400192
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8
 address: 50400192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
just wrote:
 load result: 52080128
main thread es->rtid=-1
Number of states=7
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=7
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 50629616
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50629616
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=7
GetElementPtr info:
  %v4l2_dev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %27, i32 0, i32 2
 initial base: 53934944
geptr offset: 16
geptr base: 53934960
geptr final base: 53934960
main thread es->rtid=-1
Number of states=7
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 52706144
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52706144
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
Alloc'ing...
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
main thread es->rtid=-1
Number of states=7
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

Path constraint:
array 80[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Ult N1:(Add w64 18446744073659151516 N0) 824)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      arg_0))
         (Ult (Add w64 18446744073659151536 N0) 817)
         (Slt (ReadLSB w32 0 80)
              0)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=7
Alloc'ing...
main thread es->rtid=-1
Number of states=7
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8

 address: 51272168
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51272168
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 51567504 to 51272168
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8
 address: 51272168
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51272168
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 51567504
main thread es->rtid=-1
Number of states=6
memory operation
  %14 = load %struct.device*, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %32 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51272160
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.v4l2_device* %v4l2_dev, %struct.v4l2_device** %v4l2_dev.addr, align 8KLEE: WARNING ONCE: calling external: usbtv_video_free(51272160) at [no debug info]

 address: 51493744
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51493744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %33 = load i32, i32* %ret, align 4  %33 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 %33, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8
 address: 52706144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52706144
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 52080128
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 52340320
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52340320
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %15 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: 52080128
geptr offset: 18446744073709551464
geptr base: 52079976
geptr final base: 52079976
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %dev17 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %15, i32 0, i32 0
 initial base: 54219520
geptr final base: 54219520
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.device* %14, %struct.device** %dev17, align 8
 address: 54219520
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54219520
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51041776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51041776
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  %16 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 52340320
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52340320
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.v4l2_device*, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 51493744
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51493744
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934960
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %ref = getelementptr inbounds %struct.v4l2_device, %struct.v4l2_device* %0, i32 0, i32 8
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Ult N1:(Add w64 18446744073659151516 N0) 824)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      arg_0))
         (Ult (Add w64 18446744073659151536 N0) 817)
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Slt (ReadLSB w32 0 86)
              0)]
        false)

 initial base: 53934960
geptr offset: 104
geptr base: 53935064
geptr final base: 53935064
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 51284928
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51284928
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 52706704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52706704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp
 address: 52706704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52706704
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 52079976
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.kref* %kref, %struct.kref** %kref.addr, align 8
 address: 51151072
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51151072
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.kref*, %struct.kref** %kref.addr, align 8
 address: 51151072
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51151072
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53935064
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %refcount = getelementptr inbounds %struct.kref, %struct.kref* %0, i32 0, i32 0
 initial base: 53935064
geptr final base: 53935064
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
return type of external function: %struct.usb_device*
allocation size: 8
memory operation
  %call19 = call %struct.usb_device* @usb_get_dev(%struct.usb_device* %call18) #10
 address: 51078976
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51078976
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w64 0 67)
main thread es->rtid=-1
Number of states=5
memory operation
  %17 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %udev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %17, i32 0, i32 1
 initial base: 54039792
geptr offset: 8
geptr base: 54039800
geptr final base: 54039800
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usb_device* %call19, %struct.usb_device** %udev, align 8
 address: 54039800
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54039800
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 51041776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51041776
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 52297504
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52297504
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %18 = load i32, i32* %size, align 4  %18 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (Mul w32 (And w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
                            2047)
                   2047)
          (Add w32 1
                   (AShr w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
                                      6144)
                             11)))
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 50914800
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50914800
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 52297504
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52297504
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 51284928
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51284928
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %28 = load %struct.device*, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=5
memory operation
  %19 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %iso_size = getelementptr inbounds %struct.usbtv, %struct.usbtv* %19, i32 0, i32 17
 initial base: 54039792
geptr offset: 2340
geptr base: 54042132
geptr final base: 54042132
main thread es->rtid=-1
Number of states=5
memory operation
  store i32 0, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 52644720
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52644720
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store i32 %18, i32* %iso_size, align 4
 address: 54042132
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 54042132
default offset for target address 2340
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %20 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr66[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Ult N1:(Add w64 18446603689734185772 N0) 1536)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr66))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Eq false
             (Slt (ReadLSB w32 0 86)
                  0))]
        false)

 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=5
Number of states=4
memory operation
  %21 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 52638144
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52638144
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 52644720
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52644720
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 52638144
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52638144
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 50914800
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50914800
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=4
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %35 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
 initial base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %udev31 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %35, i32 0, i32 1
 initial base: 53934944
geptr offset: 8
geptr base: 53934952
geptr final base: 53934952
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %30 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8  %1 = load %struct.device*, %struct.device** %parent, align 8

 address: 50400192
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
Is %struct.device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 48 arg_0)
allocation size: 8
lazy initializing writing 51551744 to 50400192
memory operation
  %1 = load %struct.device*, %struct.device** %parent, align 8
 address: 50400192
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400192
default offset for target address 48
bounds check expression true
in bounds? 1
just wrote:
 load result: 51551744
main thread es->rtid=-1
Number of states=4
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8

 address: 53934952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53934952
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 50927664 to 53934952
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8
 address: 53934952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53934952
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 50927664
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %udev30 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %30, i32 0, i32 1
 initial base: 53934944
geptr offset: 8
geptr base: 53934952
geptr final base: 53934952
main thread es->rtid=-1
Number of states=4
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8

 address: 53934952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53934952
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 52638336 to 53934952
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8
 address: 53934952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53934952
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 52638336
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.device* %1, %struct.device** %__mptr, align 8
 address: 53954352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53954352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %2 = load %struct.device*, %struct.device** %__mptr, align 8
 address: 53954352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53954352
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51551744
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %32 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
Alloc'ing...
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %add.ptr = getelementptr i8, i8* %3, i64 -152
 initial base: 51551744
geptr offset: 18446744073709551464
geptr base: 51551592
geptr final base: 51551592
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_device* %4, %struct.usb_device** %tmp
 address: 54165664
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54165664
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 54080576
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54080576
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %5 = load %struct.usb_device*, %struct.usb_device** %tmp
 address: 54165664
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54165664
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 51551592
main thread es->rtid=-1
Number of states=4
memory operation
  %33 = load i32, i32* %ret, align 4  %33 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50982864
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50982864
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %33, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  %37 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 53934944
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 54080576
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54080576
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
return type of external function: %struct.usb_device*
allocation size: 8
memory operation
  %call19 = call %struct.usb_device* @usb_get_dev(%struct.usb_device* %call18) #10
 address: 51149696
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51149696
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w64 0 67)
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=4
memory operation
  %17 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %udev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %17, i32 0, i32 1
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr66[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Ult N1:(Add w64 18446603689734185772 N0) 1536)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr66))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Slt (ReadLSB w32 0 86)
              0)]
        false)

 initial base: 54219520
geptr offset: 8
geptr base: 54219528
geptr final base: 54219528
main thread es->rtid=-1
Number of states=4
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.usb_device* %call19, %struct.usb_device** %udev, align 8
 address: 54219528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54219528
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %18 = load i32, i32* %size, align 4  %18 = load i32, i32* %size, align 4

 address: 50408576
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50408576
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (Mul w32 (And w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**))
                            2047)
                   2047)
          (Add w32 1
                   (AShr w32 (And w32 (ZExt w32 (ReadLSB w16 4 %struct.usb_endpoint_descriptor**_1))
                                      6144)
                             11)))
main thread es->rtid=-1
Number of states=3
Executing free..
Resolving exact for free!Resolved exact for free!main thread es->rtid=-1
Number of states=3
memory operation
  %19 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=3
memory operation
  %39 = load i32, i32* %ret, align 4  %39 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=3
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 50982864
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50982864
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=3
memory operation
  store i32 %39, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %iso_size = getelementptr inbounds %struct.usbtv, %struct.usbtv* %19, i32 0, i32 17
 initial base: 54219520
geptr offset: 2340
geptr base: 54221860
geptr final base: 54221860
main thread es->rtid=-1
Number of states=3
memory operation
  store i32 %18, i32* %iso_size, align 4
 address: 54221860
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 54221860
default offset for target address 2340
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

Path constraint:
array 80[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr66[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 97 0 0 0 98 0 0 0 99 0 0 0 100 0 0 0 101 0 0 0 102 0 0 0 103 0 0 0 104 0 0 0 105 0 0 0 106 0 0 0 107 0 0 0 108 0 0 0 109 0 0 0 110 0 0 0 111 0 0 0 112 0 0 0 113 0 0 0 114 0 0 0 115 0 0 0 116 0 0 0 117 0 0 0 118 0 0 0 119 0 0 0 120 0 0 0 121 0 0 0 122 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Ult N1:(Add w64 18446603689734185772 N0) 1536)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr66))
         (Slt (ReadLSB w32 0 80)
              0)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=3
Number of states=2
memory operation
  %20 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
memory operation
  %21 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 53945568
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53945568
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 52080704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52080704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 52080704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52080704
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=2
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 53945568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53945568
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=2
Alloc'ing...
main thread es->rtid=-1
Number of states=2
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 50508656
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50508656
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50734464
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50734464
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=2
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50508656
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50508656
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=2
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %23 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=2
return type of external function: i32
allocation size: 4
memory operation
  %call20 = call i32 @usbtv_video_init(%struct.usbtv* %23) #10
 address: 52660144
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 52660144
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=2
memory operation
  store i32 %call20, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=2
memory operation
  %24 = load i32, i32* %ret, align 4  %24 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 50734464
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50734464
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=3
memory operation
  %34 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 53971952
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53971952
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51574912
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51574912
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 53971952
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53971952
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 51146640
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51146640
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %25 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 52334960
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52334960
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 51574912
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51574912
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 52334960
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52334960
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 51146640
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51146640
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=3
Alloc'ing...
main thread es->rtid=-1
Number of states=3
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 50426288
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50426288
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 50928112
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50928112
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
return type of external function: i32
allocation size: 4
memory operation
  %call25 = call i32 @usbtv_audio_init(%struct.usbtv* %25) #10
 address: 50746240
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50746240
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=3
memory operation
  %23 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=3
return type of external function: i32
allocation size: 4
memory operation
  %call20 = call i32 @usbtv_video_init(%struct.usbtv* %23) #10
 address: 52321152
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 52321152
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=3
memory operation
  store i32 %call20, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 50928112
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50928112
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=3
memory operation
  store i32 %call25, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 50426288
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50426288
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=3
memory operation
  %24 = load i32, i32* %ret, align 4  %24 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=3
memory operation
  %26 = load i32, i32* %ret, align 4  %26 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=3
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=3
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
Number of states=3
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=4
memory operation
  %35 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=4
memory operation
  %25 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=4
return type of external function: i32
allocation size: 4
memory operation
  %call25 = call i32 @usbtv_audio_init(%struct.usbtv* %25) #10
 address: 50419312
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50419312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=4
memory operation
  %34 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=4
memory operation
  store i32 %call25, i32* %ret, align 4
 address: 50407744
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %udev31 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %35, i32 0, i32 1
 initial base: 54039792
geptr offset: 8
geptr base: 54039800
geptr final base: 54039800
main thread es->rtid=-1
Number of states=5
memory operation
  %29 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8

 address: 54039800
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54039800
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 51042496 to 54039800
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8
 address: 54039800
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54039800
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 51042496
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 53144496
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53144496
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %27 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51280352
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51280352
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %37 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=5
memory operation
  %26 = load i32, i32* %ret, align 4  %26 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 53144496
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53144496
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
main thread es->rtid=-1
Number of states=6
memory operation
  %29 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50407312
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50407312
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %27 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 51280352
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51280352
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %v4l2_dev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %27, i32 0, i32 2
 initial base: 54219520
geptr offset: 16
geptr base: 54219536
geptr final base: 54219536
main thread es->rtid=-1
Number of states=6
Executing free..
Resolving exact for free!Resolved exact for free!main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  %39 = load i32, i32* %ret, align 4  %39 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=6
memory operation
  store i32 %39, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
Alloc'ing...
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 50635280
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50635280
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
GetElementPtr info:
  %v4l2_dev = getelementptr inbounds %struct.usbtv, %struct.usbtv* %27, i32 0, i32 2
 initial base: 54039792
geptr offset: 16
geptr base: 54039808
geptr final base: 54039808
main thread es->rtid=-1
Number of states=6
memory operation
  store %struct.usb_interface* %intf, %struct.usb_interface** %intf.addr, align 8
 address: 50678560
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50678560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51478896
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51478896
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=6
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr67[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Ult N1:(Add w64 18446603689734184236 N0) 1536)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr67))
         (Slt (ReadLSB w32 0 80)
              0)]
        false)

 address: 50635280
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50635280
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=6
main thread es->rtid=-1
Number of states=6
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51081504
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51081504
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 51478896
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51478896
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 51042496
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51042496
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf.addr, align 8
 address: 50678560
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50678560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400144
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 7
 initial base: 50400144
geptr offset: 48
geptr base: 50400192
geptr final base: 50400192
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.v4l2_device* %v4l2_dev, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 53188656
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53188656
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load i8*, i8** %data.addr, align 8
 address: 51081504
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51081504
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.v4l2_device* %v4l2_dev, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 51645088
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51645088
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.v4l2_device*, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 53188656
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53188656
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039808
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 52631680
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52631680
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %ref = getelementptr inbounds %struct.v4l2_device, %struct.v4l2_device* %0, i32 0, i32 8
 initial base: 54039808
geptr offset: 104
geptr base: 54039912
geptr final base: 54039912
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51153776
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51153776
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51221232
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51221232
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 51153776
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51153776
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.v4l2_device*, %struct.v4l2_device** %v4l2_dev.addr, align 8
 address: 51645088
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51645088
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219536
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 51221232
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51221232
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 51042496
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51042496
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.kref* %kref, %struct.kref** %kref.addr, align 8
 address: 52080704
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52080704
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.kref*, %struct.kref** %kref.addr, align 8
 address: 52080704
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52080704
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039912
main thread es->rtid=-1
Number of states=5
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 52631680
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52631680
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %refcount = getelementptr inbounds %struct.kref, %struct.kref* %0, i32 0, i32 0
 initial base: 54039912
geptr final base: 54039912
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %ref = getelementptr inbounds %struct.v4l2_device, %struct.v4l2_device* %0, i32 0, i32 8
 initial base: 54219536
geptr offset: 104
geptr base: 54219640
geptr final base: 54219640
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
 address: 53945568
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 53945568
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
Alloc'ing...
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  store %struct.kref* %kref, %struct.kref** %kref.addr, align 8
 address: 52318816
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 52318816
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %30 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %udev30 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %30, i32 0, i32 1
 initial base: 54039792
geptr offset: 8
geptr base: 54039800
geptr final base: 54039800
main thread es->rtid=-1
Number of states=5
memory operation
  %28 = load %struct.device*, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=5
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8

 address: 54039800
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54039800
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 51798560 to 54039800
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8
 address: 54039800
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54039800
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 51798560
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %0 = load %struct.kref*, %struct.kref** %kref.addr, align 8
 address: 52318816
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 52318816
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219640
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %refcount = getelementptr inbounds %struct.kref, %struct.kref* %0, i32 0, i32 0
 initial base: 54219640
geptr final base: 54219640
main thread es->rtid=-1
Number of states=5
memory operation
  %32 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54039792
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %35 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=5
memory operation
  %33 = load i32, i32* %ret, align 4  %33 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=5
memory operation
  store i32 0, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
memory operation
  store i32 %33, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=5
GetElementPtr info:
  %udev31 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %35, i32 0, i32 1
 initial base: 54219520
geptr offset: 8
geptr base: 54219528
geptr final base: 54219528
main thread es->rtid=-1
Number of states=5
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8

 address: 54219528
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54219528
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 50844304 to 54219528
memory operation
  %36 = load %struct.usb_device*, %struct.usb_device** %udev31, align 8
 address: 54219528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54219528
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 50844304
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
memory operation
  %37 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=5
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
main thread es->rtid=-1
Number of states=5
Executing free..
Resolving exact for free!Resolved exact for free!main thread es->rtid=-1
Number of states=5
memory operation
  %39 = load i32, i32* %ret, align 4  %39 = load i32, i32* %ret, align 4

Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr67[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Ult N1:(Add w64 18446603689734184236 N0) 1536)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr67))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Slt (ReadLSB w32 0 86)
              0)]
        false)

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=5
Number of states=4
memory operation
  store i32 %39, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
memory operation
  store i8* %data, i8** %data.addr, align 8
 address: 51065232
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 51065232
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %0 = load i8*, i8** %data.addr, align 8
 address: 51065232
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 51065232
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=4
memory operation
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
 address: 53945568
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 53945568
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 80)
main thread es->rtid=-1
Number of states=4
memory operation
  %28 = load %struct.device*, %struct.device** %dev, align 8
 address: 50409136
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409136
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 50400192
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
GetElementPtr info:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
 initial base: 50400192
geptr offset: 152
geptr base: 50400344
geptr final base: 50400344
main thread es->rtid=-1
Number of states=4
memory operation
  store i8* %0, i8** %driver_data, align 8
 address: 50400344
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 50400344
default offset for target address 200
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=4
main thread es->rtid=-1
Number of states=4
memory operation
  %40 = load i32, i32* %retval
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr68[768] : w32 -> w
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Ult N1:(Add w64 18446603689734181676 N0) 768)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr68))
         (Slt (ReadLSB w32 0 80)
              0)]
        false)

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=4
Number of states=3
memory operation
  store i32 0, i32* %retval
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr67[1536] : w32 -> w8 = [128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 10 0 0 0 11 0 0 0 12 0 0 0 13 0 0 0 14 0 0 0 15 0 0 0 16 0 0 0 17 0 0 0 18 0 0 0 19 0 0 0 20 0 0 0 21 0 0 0 22 0 0 0 23 0 0 0 24 0 0 0 25 0 0 0 26 0 0 0 27 0 0 0 28 0 0 0 29 0 0 0 30 0 0 0 31 0 0 0 32 0 0 0 33 0 0 0 34 0 0 0 35 0 0 0 36 0 0 0 37 0 0 0 38 0 0 0 39 0 0 0 40 0 0 0 41 0 0 0 42 0 0 0 43 0 0 0 44 0 0 0 45 0 0 0 46 0 0 0 47 0 0 0 48 0 0 0 49 0 0 0 50 0 0 0 51 0 0 0 52 0 0 0 53 0 0 0 54 0 0 0 55 0 0 0 56 0 0 0 57 0 0 0 58 0 0 0 59 0 0 0 60 0 0 0 61 0 0 0 62 0 0 0 63 0 0 0 64 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 91 0 0 0 92 0 0 0 93 0 0 0 94 0 0 0 95 0 0 0 96 0 0 0 65 0 0 0 66 0 0 0 67 0 0 0 68 0 0 0 69 0 0 0 70 0 0 0 71 0 0 0 72 0 0 0 73 0 0 0 74 0 0 0 75 0 0 0 76 0 0 0 77 0 0 0 78 0 0 0 79 0 0 0 80 0 0 0 81 0 0 0 82 0 0 0 83 0 0 0 84 0 0 0 85 0 0 0 86 0 0 0 87 0 0 0 88 0 0 0 89 0 0 0 90 0 0 0 123 0 0 0 124 0 0 0 125 0 0 0 126 0 0 0 127 0 0 0 128 0 0 0 129 0 0 0 130 0 0 0 131 0 0 0 132 0 0 0 133 0 0 0 134 0 0 0 135 0 0 0 136 0 0 0 137 0 0 0 138 0 0 0 139 0 0 0 140 0 0 0 141 0 0 0 142 0 0 0 143 0 0 0 144 0 0 0 145 0 0 0 146 0 0 0 147 0 0 0 148 0 0 0 149 0 0 0 150 0 0 0 151 0 0 0 152 0 0 0 153 0 0 0 154 0 0 0 155 0 0 0 156 0 0 0 157 0 0 0 158 0 0 0 159 0 0 0 160 0 0 0 161 0 0 0 162 0 0 0 163 0 0 0 164 0 0 0 165 0 0 0 166 0 0 0 167 0 0 0 168 0 0 0 169 0 0 0 170 0 0 0 171 0 0 0 172 0 0 0 173 0 0 0 174 0 0 0 175 0 0 0 176 0 0 0 177 0 0 0 178 0 0 0 179 0 0 0 180 0 0 0 181 0 0 0 182 0 0 0 183 0 0 0 184 0 0 0 185 0 0 0 186 0 0 0 187 0 0 0 188 0 0 0 189 0 0 0 190 0 0 0 191 0 0 0 192 0 0 0 193 0 0 0 194 0 0 0 195 0 0 0 196 0 0 0 197 0 0 0 198 0 0 0 199 0 0 0 200 0 0 0 201 0 0 0 202 0 0 0 203 0 0 0 204 0 0 0 205 0 0 0 206 0 0 0 207 0 0 0 208 0 0 0 209 0 0 0 210 0 0 0 211 0 0 0 212 0 0 0 213 0 0 0 214 0 0 0 215 0 0 0 216 0 0 0 217 0 0 0 218 0 0 0 219 0 0 0 220 0 0 0 221 0 0 0 222 0 0 0 223 0 0 0 224 0 0 0 225 0 0 0 226 0 0 0 227 0 0 0 228 0 0 0 229 0 0 0 230 0 0 0 231 0 0 0 232 0 0 0 233 0 0 0 234 0 0 0 235 0 0 0 236 0 0 0 237 0 0 0 238 0 0 0 239 0 0 0 240 0 0 0 241 0 0 0 242 0 0 0 243 0 0 0 244 0 0 0 245 0 0 0 246 0 0 0 247 0 0 0 248 0 0 0 249 0 0 0 250 0 0 0 251 0 0 0 252 0 0 0 253 0 0 0 254 0 0 0 255 0 0 0]
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Ult N1:(Add w64 18446603689734184236 N0) 1536)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr67))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Eq false
             (Slt (ReadLSB w32 0 86)
                  0))]
        false)

 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=3
Number of states=2
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
memory operation
  %40 = load i32, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 0
main thread es->rtid=-1
Number of states=2
memory operation
  %30 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=2
GetElementPtr info:
  %udev30 = getelementptr inbounds %struct.usbtv, %struct.usbtv* %30, i32 0, i32 1
 initial base: 54219520
geptr offset: 8
geptr base: 54219528
geptr final base: 54219528
main thread es->rtid=-1
Number of states=2
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8

 address: 54219528
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 54219528
default offset for target address 8
bounds check expression true
in bounds? 1
Is %struct.usb_device** (count=1) to be lazy init?
Yes!
original load result: (ReadLSB w64 0 67)
allocation size: 8
lazy initializing writing 52305600 to 54219528
memory operation
  %31 = load %struct.usb_device*, %struct.usb_device** %udev30, align 8
Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr68[768] : w32 -> w
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Ult N1:(Add w64 18446603689734181676 N0) 768)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr68))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Eq false
             (Slt (ReadLSB w32 0 86)
                  0))]
        false)

 address: 54219528
executeMemoryOperation isWrite? 1
width for the memop: 64
bytes for the memop: 8
address for memop 54219528
default offset for target address 8
bounds check expression true
in bounds? 1
just wrote:
 load result: 52305600
main thread es->rtid=-1
Number of states=2
main thread es->rtid=-1
Number of states=2
Number of states=1
memory operation
  %32 = load %struct.usbtv*, %struct.usbtv** %usbtv, align 8
 address: 50409520
executeMemoryOperation isWrite? 0
width for the memop: 64
bytes for the memop: 8
address for memop 50409520
default offset for target address 0
bounds check expression true
in bounds? 1
 load result: 54219520
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %33 = load i32, i32* %ret, align 4  %33 = load i32, i32* %ret, align 4

 address: 50407744
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50407744
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=1
memory operation
  store i32 %33, i32* %retval
 address: 50406560
executeMemoryOperation isWrite? 1
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
just wrote:
main thread es->rtid=-1
Number of states=1
main thread es->rtid=-1
Number of states=1
memory operation
  %40 = load i32, i32* %retval  %40 = load i32, i32* %retval

Path constraint:
array 80[4] : w32 -> w8 = symbolic
array 86[4] : w32 -> w8 = symbolic
array arg_0[824] : w32 -> w8 = symbolic
array const_arr68[768] : w32 -> w
(query [(Eq 2
             (ReadLSB w32 16 arg_0))
         (Eq false
             (Ult (Add w64 18446744073659925996
                           N0:(ReadLSB w64 0 arg_0))
                  336))
         (Eq false
             (Ult (Add w64 18446744073659922844 N0) 19))
         (Eq false
             (Ult (Add w64 18446744073659922412 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659922076 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659866524 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659866476 N0) 817))
         (Eq false
             (Ult (Add w64 18446744073659864540 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659802572 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659802524 N0) 80))
         (Eq false
             (Ult (Add w64 18446744073659801500 N0) 41))
         (Eq false
             (Ult (Add w64 18446744073659786780 N0) 33))
         (Eq false
             (Ult (Add w64 18446744073659785948 N0) 45))
         (Eq false
             (Ult (Add w64 18446744073659785452 N0) 44))
         (Eq false
             (Ult (Add w64 18446744073659784956 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659784508 N0) 17))
         (Eq false
             (Ult (Add w64 18446744073659784124 N0) 500))
         (Eq false
             (Ult (Add w64 18446744073659782732 N0) 50))
         (Eq false
             (Ult (Add w64 18446744073659782284 N0) 325))
         (Eq false
             (Ult (Add w64 18446744073659781292 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659780908 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659778636 N0) 924))
         (Eq false
             (Ult (Add w64 18446744073659776332 N0) 13))
         (Eq false
             (Ult (Add w64 18446744073659776044 N0) 89))
         (Eq false
             (Ult (Add w64 18446744073659775548 N0) 36))
         (Eq false
             (Ult (Add w64 18446744073659775500 N0) 53))
         (Eq false
             (Ult (Add w64 18446744073659774684 N0) 32))
         (Eq false
             (Ult (Add w64 18446744073659774636 N0) 354))
         (Eq false
             (Ult (Add w64 18446744073659773676 N0) 31))
         (Eq false
             (Ult (Add w64 18446744073659773212 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659772380 N0) 34))
         (Eq false
             (Ult (Add w64 18446744073659772332 N0) 112))
         (Eq false
             (Ult (Add w64 18446744073659680188 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659554348 N0) 22))
         (Eq false
             (Ult (Add w64 18446744073659554012 N0) 10))
         (Eq false
             (Ult (Add w64 18446744073659553580 N0) 1313))
         (Eq false
             (Ult (Add w64 18446744073659550508 N0) 43))
         (Eq false
             (Ult (Add w64 18446744073659550108 N0) 49))
         (Eq false
             (Ult (Add w64 18446744073659549660 N0) 267))
         (Eq false
             (Ult (Add w64 18446744073659548812 N0) 29))
         (Eq false
             (Ult (Add w64 18446744073659548764 N0) 20))
         (Eq false
             (Ult (Add w64 18446744073659184508 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659182652 N0) 240))
         (Eq false
             (Ult (Add w64 18446744073659181276 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659180796 N0) 6))
         (Eq false
             (Ult (Add w64 18446744073659180412 N0) 39))
         (Eq false
             (Ult (Add w64 18446744073659180060 N0) 64))
         (Eq false
             (Ult (Add w64 18446744073659178812 N0) 24))
         (Eq false
             (Ult (Add w64 18446744073659178300 N0) 12))
         (Eq false
             (Ult (Add w64 18446744073659177692 N0) 81))
         (Eq false
             (Ult (Add w64 18446744073659177004 N0) 15))
         (Eq false
             (Ult (Add w64 18446744073659176396 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175884 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659175324 N0) 16))
         (Eq false
             (Ult (Add w64 18446744073659174764 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659174204 N0) 72))
         (Eq false
             (Ult (Add w64 18446744073659173548 N0) 14))
         (Eq false
             (Ult (Add w64 18446744073659172988 N0) 5))
         (Eq false
             (Ult (Add w64 18446744073659151516 N0) 824))
         (Eq false
             (Ult (Add w64 18446744073659145100 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659144380 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659144348 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659143916 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659143084 N0) 4))
         (Eq false
             (Ult (Add w64 18446744073659142524 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659142140 N0) 8))
         (Eq false
             (Ult (Add w64 18446744073659141708 N0) 8))
         (Eq false
             (Ult (Add w64 18446603689734185772 N0) 1536))
         (Eq false
             (Ult (Add w64 18446603689734184236 N0) 1536))
         (Ult N1:(Add w64 18446603689734181676 N0) 768)
         (Eq 4
             (Read w8 (Extract w32 0 N1)
                      const_arr68))
         (Eq false
             (Slt (ReadLSB w32 0 80)
                  0))
         (Slt (ReadLSB w32 0 86)
              0)]
        false)

KLEE: done: total instructions = 1404
KLEE: done: completed paths = 88
KLEE: done: generated tests = 88

 address: 50406560
executeMemoryOperation isWrite? 0
width for the memop: 32
bytes for the memop: 4
address for memop 50406560
default offset for target address 0
bounds check expression true
in bounds? 1
Is i32* (count=0) to be lazy init?
 load result: (ReadLSB w32 0 86)
main thread es->rtid=-1
Number of states=1
